{"version":3,"sources":["actions/s3.js","components/s3Upload.js","components/s3UploadMulti.js"],"names":["dmx","Actions","s3.upload","options","inp","this","parse","input","url","file","document","getElementById","files","Promise","resolve","reject","xhr","XMLHttpRequest","onerror","onabort","ontimeout","onload","open","setRequestHeader","type","send","Component","initialData","data","state","idle","ready","uploading","done","uploadProgress","position","total","percent","lastError","status","message","response","attributes","String","default","prop","accept","autoupload","Boolean","methods","abort","reset","select","click","upload","events","start","Event","error","success","ProgressEvent","render","node","$node","addEventListener","onDragover","bind","onDrop","onClick","createElement","props","onChange","onAbort","onError","onTimeout","onLoad","onProgress","$parse","update","e","stopPropagation","preventDefault","dataTransfer","dropEffect","items","length","validateDrag","updateFile","target","value","set","dispatchEvent","console","responseText","size","loaded","Math","ceil","lengthComputable","item","kind","info","name","date","lastModified","Date","lastModifiedDate","toISOString","dataUrl","indexOf","reader","FileReader","result","requestUpdate","readAsDataURL","upload2","encodeURIComponent","JSON","acl","substr","err","thumbs","thumb-width","Number","thumb-height","remove","id","startUpload","multiple","maxRetries","uploads","ii","isUploading","find","nextRetry","retries","webkitGetAsEntry","updateFilesFromItems","updateFiles","uploaded","setTimeout","upload3","statusText","resize","src","cb","img","tWidth","parseInt","tHeight","canvas","ctx","getContext","sWidth","width","sHeight","height","min","tRatio","sx","sy","drawImage","toDataURL","push","concat","array","forEach","entry","isFile","getAsFile","isDirectory","updateFilesFromDirectory","directory","path","createReader","readEntries","entries","fullPath","warn","index","findIndex","splice","log"],"mappings":"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","file":"../dmxS3Upload/dmxS3Upload.js","sourcesContent":["dmx.Actions({\r\n\r\n    's3.upload': function(options) {\r\n        var inp = this.parse(options.input);\r\n        var url = this.parse(options.url);\r\n        var file = document.getElementById(inp).files[0];\r\n        \r\n        return new Promise(function(resolve, reject) {\r\n            var xhr = new XMLHttpRequest();\r\n\r\n            xhr.onerror = reject;\r\n            xhr.onabort = reject;\r\n            xhr.ontimeout = reject;\r\n            xhr.onload = resolve;\r\n\r\n            xhr.open('PUT', url);\r\n            xhr.setRequestHeader('Content-Type', file.type);\r\n            xhr.send(file);\r\n        });\r\n    }\r\n\r\n})","dmx.Component('s3-upload', {\r\n\r\n    initialData: {\r\n        data: null,\r\n        file: null,\r\n        state: {\r\n            idle: true,\r\n            ready: false,\r\n            uploading: false,\r\n            done: false\r\n        },\r\n        uploadProgress: {\r\n            position: 0,\r\n            total: 0,\r\n            percent: 0\r\n        },\r\n        lastError: {\r\n            status: 0,\r\n            message: '',\r\n            response: null\r\n        }\r\n    },\r\n\r\n    attributes: {\r\n        url: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        prop: {\r\n            type: String,\r\n            default: 'url'\r\n        },\r\n\r\n        accept: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        autoupload: {\r\n            type: Boolean,\r\n            default: false\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        abort: function() {\r\n            this.abort();\r\n        },\r\n\r\n        reset: function() {\r\n            this.reset();\r\n        },\r\n\r\n        select: function() {\r\n            this.input.click();\r\n        },\r\n\r\n        upload: function() {\r\n            this.upload();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        start: Event, // when starting an ajax call\r\n        done: Event, // when ajax call completed (success and error)\r\n        error: Event, // server error or javascript error (json parse or network transport) or timeout error\r\n        abort: Event, // ajax call was aborted\r\n        success: Event, // successful ajax call,\r\n        upload: ProgressEvent // on upload progress\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node.addEventListener('dragover', this.onDragover.bind(this));\r\n        this.$node.addEventListener('drop', this.onDrop.bind(this));\r\n        this.$node.addEventListener('click', this.onClick.bind(this));\r\n        \r\n        this.input = document.createElement('input');\r\n        this.input.type = 'file';\r\n        this.input.accept = this.props.accept || '*/*';\r\n        this.input.addEventListener('change', this.onChange.bind(this));\r\n\r\n        this.xhr = new XMLHttpRequest();\r\n        this.xhr.addEventListener('abort', this.onAbort.bind(this));\r\n        this.xhr.addEventListener('error', this.onError.bind(this));\r\n        this.xhr.addEventListener('timeout', this.onTimeout.bind(this));\r\n        this.xhr.addEventListener('load', this.onLoad.bind(this));\r\n        this.xhr.upload.addEventListener('progress', this.onProgress.bind(this));\r\n\r\n        this.$parse();\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.accept != props.accept) {\r\n            this.input.accept = this.props.accept || '*/*';\r\n        }\r\n    },\r\n\r\n    onDragover: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        e.dataTransfer.dropEffect = e.dataTransfer.items.length == 1 && this.validateDrag(e.dataTransfer.items[0]) ? 'copy' : 'none';\r\n    },\r\n\r\n    onDrop: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (e.dataTransfer.files.length == 1) {\r\n            this.updateFile(e.dataTransfer.files[0]);\r\n        }\r\n    },\r\n\r\n    onClick: function(e) {\r\n        this.input.click();\r\n    },\r\n\r\n    onChange: function(e) {\r\n        this.updateFile(e.target.files[0]);\r\n        this.input.value = '';\r\n        this.input.type = '';\r\n        this.input.type = 'file';\r\n    },\r\n\r\n    onAbort: function(e) {\r\n        this.set({\r\n            data: null,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('abort');\r\n        this.dispatchEvent('done');\r\n    },\r\n\r\n    onError: function(e) {\r\n        if (e instanceof ProgressEvent) {\r\n            e = 'Network error, perhaps no CORS set';\r\n        }\r\n\r\n        this.set({\r\n            data: null,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            },\r\n            lastError: {\r\n                status: 0,\r\n                message: e,\r\n                response: null\r\n            }\r\n        });\r\n\r\n        console.error(e);\r\n\r\n        this.dispatchEvent('error');\r\n        this.dispatchEvent('done');\r\n    },\r\n\r\n    onTimeout: function(e) {\r\n        this.onError('Execution timeout');\r\n    },\r\n\r\n    onLoad: function(e) {\r\n        if (this.xhr.status >= 400) {\r\n            this.onError(this.xhr.responseText);\r\n        } else {\r\n            this.set({\r\n                state: {\r\n                    idle: false,\r\n                    ready: false,\r\n                    uploading: false,\r\n                    done: true\r\n                },\r\n                uploadProgress: {\r\n                    position: this.file.size,\r\n                    total: this.file.size,\r\n                    percent: 100\r\n                }\r\n            });\r\n\r\n            this.dispatchEvent('success');\r\n            this.dispatchEvent('done');\r\n        }\r\n    },\r\n\r\n    onProgress: function(e) {\r\n        this.set({\r\n            state: {\r\n                idle: false,\r\n                ready: false,\r\n                uploading: true,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: e.loaded,\r\n                total: this.file.size,\r\n                percent: Math.ceil(e.loaded / e.total * 100)\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('upload', {\r\n            lengthComputable: e.lengthComputable,\r\n            loaded: e.loaded,\r\n            total: e.total\r\n        });\r\n    },\r\n\r\n    validateDrag: function(item) {\r\n        // todo validate accept type\r\n        return item.kind == 'file';\r\n    },\r\n\r\n    updateFile: function(file) {\r\n        var info = {\r\n            name: file.name,\r\n            size: file.size,\r\n            type: file.type,\r\n            date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n            dataUrl: null\r\n        };\r\n\r\n        if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n            file.reader = new FileReader();\r\n\r\n            file.reader.onload = function(e) {\r\n                info.dataUrl = e.target.result;\r\n                dmx.requestUpdate();\r\n            }.bind(this);\r\n\r\n            file.reader.readAsDataURL(file);\r\n        }\r\n\r\n        this.file = file;\r\n\r\n        this.set({\r\n            file: info,\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        if (this.props.autoupload) {\r\n            this.upload();\r\n        }\r\n    },\r\n\r\n    abort: function() {\r\n        this.xhr.abort();\r\n    },\r\n\r\n    reset: function() {\r\n        this.abort();\r\n        this.file = null;\r\n        this.set({\r\n            data: null,\r\n            file: null,\r\n            state: {\r\n                idle: true,\r\n                ready: false,\r\n                uploading: false,\r\n                done: false\r\n            },\r\n            uploadProgress: {\r\n                position: 0,\r\n                total: 0,\r\n                percent: 0\r\n            },\r\n            lastError: {\r\n                status: 0,\r\n                message: '',\r\n                response: null\r\n            }\r\n        });\r\n    },\r\n\r\n    upload: function() {\r\n        if (!this.props.url) {\r\n            this.onError('No url attribute is set');\r\n            return;\r\n        }\r\n\r\n        this.set({\r\n            state: {\r\n                idle: false,\r\n                ready: false,\r\n                uploading: true,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        this.dispatchEvent('start');\r\n\r\n        var xhr = new XMLHttpRequest();\r\n        xhr.onabort = this.onAbort.bind(this);\r\n        xhr.onerror = this.onError.bind(this);\r\n        xhr.onload = this.upload2.bind(this, xhr);\r\n        xhr.open('GET', this.props.url + '?name=' + encodeURIComponent(this.file.name));\r\n        xhr.send();\r\n    },\r\n\r\n    upload2: function(xhr) {\r\n        try {\r\n            var data = JSON.parse(xhr.responseText);\r\n            var url = data[this.props.prop]\r\n            this.set('data', data);\r\n            this.xhr.open('PUT', url);\r\n            this.xhr.setRequestHeader('Content-Type', this.file.type);\r\n            if (url.indexOf('x-amz-acl=') != -1) {\r\n                // could be improved\r\n                var acl = url.substr(url.indexOf('x-amz-acl=') + 10);\r\n                if (acl.indexOf('&') != -1) acl = acl.substr(0, acl.indexOf('&'));\r\n                this.xhr.setRequestHeader('x-amz-acl', acl);\r\n            }\r\n            this.xhr.send(this.file);\r\n        } catch (err) {\r\n            this.onError(err);\r\n        }\r\n    }\r\n\r\n});","dmx.Component('s3-upload-multi', {\r\n\r\n    initialData: {\r\n        data: null,\r\n        files: [],\r\n        state: {\r\n            idle: true,\r\n            ready: false,\r\n            uploading: false\r\n        },\r\n        lastError: ''\r\n    },\r\n\r\n    attributes: {\r\n        url: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        prop: {\r\n            type: String,\r\n            default: 'url'\r\n        },\r\n\r\n        accept: {\r\n            type: String,\r\n            default: null\r\n        },\r\n\r\n        autoupload: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        thumbs: {\r\n            type: String,\r\n            default: 'true'\r\n        },\r\n\r\n        'thumb-width': {\r\n            type: Number,\r\n            default: 100\r\n        },\r\n\r\n        'thumb-height': {\r\n            type: Number,\r\n            default: 100\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        abort: function() {\r\n            this.abort();\r\n        },\r\n\r\n        reset: function() {\r\n            this.reset();\r\n        },\r\n\r\n        select: function() {\r\n            this.input.click();\r\n        },\r\n\r\n        remove: function(id) {\r\n            this.remove(id);\r\n        },\r\n\r\n        upload: function() {\r\n            this.startUpload();\r\n        }\r\n    },\r\n\r\n    events: {\r\n        start: Event, // when starting an ajax call\r\n        done: Event, // when ajax call completed (success and error)\r\n        error: Event, // server error or javascript error (json parse or network transport) or timeout error\r\n        abort: Event, // ajax call was aborted\r\n        success: Event // successful ajax call\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node.addEventListener('dragover', this.onDragover.bind(this));\r\n        this.$node.addEventListener('drop', this.onDrop.bind(this));\r\n        this.$node.addEventListener('click', this.onClick.bind(this));\r\n        \r\n        this.input = document.createElement('input');\r\n        this.input.type = 'file';\r\n        this.input.multiple = true;\r\n        this.input.accept = this.props.accept || '*/*';\r\n        this.input.addEventListener('change', this.onChange.bind(this));\r\n\r\n        this.maxRetries = 5;\r\n        this.uploads = [];\r\n        this.ii = 0;\r\n\r\n        this.$parse();\r\n    },\r\n\r\n    update: function(props) {\r\n        if (this.props.accept != props.accept) {\r\n            this.input.accept = this.props.accept || '*/*';\r\n        }\r\n\r\n        if (this.uploads.length) {\r\n            if (this.isUploading()) {\r\n                this.set('state', {\r\n                    idle: false,\r\n                    ready: false,\r\n                    uploading: true\r\n                });\r\n            } else {\r\n                this.set('state', {\r\n                    idle: false,\r\n                    ready: true,\r\n                    uploading: false\r\n                });\r\n            }\r\n        } else {\r\n            this.set('state', {\r\n                idle: true,\r\n                ready: false,\r\n                uploading: false\r\n            });\r\n        }\r\n    },\r\n\r\n    isUploading: function() {\r\n        return !!this.uploads.find(function(upload) {\r\n            return upload.info.uploading;\r\n        }, this);\r\n    },\r\n\r\n    nextRetry: function(retries) {\r\n        return (this.maxRetries - retries + 1) * 3000;\r\n    },\r\n\r\n    onDragover: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        e.dataTransfer.dropEffect = 'copy';\r\n    },\r\n\r\n    onDrop: function(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n\r\n        if (!e.dataTransfer) return;\r\n\r\n        var files = e.dataTransfer.files;\r\n\r\n        if (files.length) {\r\n            var items = e.dataTransfer.items;\r\n\r\n            if (items && items.length && items[0].webkitGetAsEntry) {\r\n                this.updateFilesFromItems(items);\r\n            } else {\r\n                this.updateFiles(files);\r\n            }\r\n        }\r\n    },\r\n\r\n    onClick: function(e) {\r\n        this.input.click();\r\n    },\r\n\r\n    onChange: function(e) {\r\n        this.updateFiles(e.target.files);\r\n        this.input.value = '';\r\n        this.input.type = '';\r\n        this.input.type = 'file';\r\n    },\r\n\r\n    onAbort: function(upload, e) {\r\n        upload.info.uploading = false;\r\n        upload.info.uploaded = 0;\r\n        upload.info.percent = 0;\r\n        \r\n        dmx.requestUpdate();\r\n\r\n        if (!this.isUploading()) {\r\n            this.dispatchEvent('abort');\r\n            this.dispatchEvent('done');\r\n        }\r\n    },\r\n\r\n    onError: function(upload, e) {\r\n        if (upload.url && upload.retries) {\r\n            setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n            return;\r\n        }\r\n        \r\n        if (e instanceof ProgressEvent) {\r\n            e = 'Network error, perhaps no CORS set';\r\n        } else {\r\n            e = e.message ||  e;\r\n        }\r\n\r\n        this.set('lastError', e);\r\n\r\n        upload.info.uploading = false;\r\n        upload.info.uploaded = 0;\r\n        upload.info.percent = 0;\r\n        upload.info.error = e;\r\n\r\n        dmx.requestUpdate();\r\n\r\n        if (!this.isUploading()) {\r\n            this.dispatchEvent('error');\r\n            this.dispatchEvent('done');\r\n        }\r\n    },\r\n\r\n    onTimeout: function(upload, e) {\r\n        this.onError(upload, 'Execution timeout');\r\n    },\r\n\r\n    onLoad: function(upload, e) {\r\n        if (upload.xhr.status >= 500 || upload.xhr.status == 429) {\r\n            if (upload.retries) {\r\n                setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n            } else {\r\n                this.onError(upload, upload.xhr.responseText || upload.xhr.statusText);\r\n            }\r\n        } else if (upload.xhr.status >= 400) {\r\n            this.onError(upload, upload.xhr.responseText || upload.xhr.statusText);\r\n        } else {\r\n            this.remove(upload.file.id);\r\n\r\n            dmx.requestUpdate();\r\n\r\n            if (!this.isUploading()) {\r\n                if (!this.uploads.length) {\r\n                    this.dispatchEvent('success');\r\n                } else {\r\n                    this.dispatchEvent('error');\r\n                }\r\n                this.dispatchEvent('done');\r\n            }\r\n        }\r\n    },\r\n\r\n    onProgress: function(upload, e) {\r\n        upload.info.uploaded = e.loaded;\r\n        upload.info.percent = e.lengthComputable ? Math.ceil(e.loaded / e.total * 100) : 0;\r\n\r\n        dmx.requestUpdate();\r\n    },\r\n\r\n    resize: function(src, cb) {\r\n        var img = document.createElement('img');\r\n\r\n        var tWidth = parseInt(this.props['thumb-width']) || 100;\r\n        var tHeight = parseInt(this.props['thumb-height']) || 100;\r\n\r\n        img.onload = function() {\r\n            var canvas = document.createElement('canvas');\r\n            var ctx = canvas.getContext('2d');\r\n\r\n            var sWidth = img.width;\r\n            var sHeight = img.height;\r\n\r\n            tWidth = Math.min(tWidth, sWidth);\r\n            tHeight = Math.min(tHeight, sHeight);\r\n\r\n            var sRatio = sWidth / sHeight;\r\n            var tRatio = tWidth / tHeight;\r\n\r\n            if (sWidth > tWidth || sHeight > tHeight) {\r\n                if (sRatio > tRatio) {\r\n                    sWidth = sHeight * tRatio;\r\n                } else {\r\n                    sHeight = sWidth / tRatio;\r\n                }\r\n            }\r\n\r\n            canvas.width = tWidth;\r\n            canvas.height = tHeight;\r\n\r\n            var sx = (img.width - sWidth) / 2;\r\n            var sy = (img.height - sHeight) / 2;\r\n\r\n            ctx.drawImage(img, sx, sy, sWidth, sHeight, 0, 0, tWidth, tHeight);\r\n\r\n            cb(canvas.toDataURL());\r\n        };\r\n        \r\n        img.src = src;\r\n    },\r\n\r\n    updateFile: function(file) {\r\n        file.id = ++this.ii;\r\n\r\n        var info = {\r\n            id: file.id,\r\n            name: file.name,\r\n            size: file.size,\r\n            type: file.type,\r\n            date: (file.lastModified ? new Date(file.lastModified) : file.lastModifiedDate).toISOString(),\r\n            data: null,\r\n            uploading: false,\r\n            uploaded: 0,\r\n            percent: 0,\r\n            ready: false,\r\n            error: null,\r\n            dataUrl: null\r\n        };\r\n\r\n        if (file.type.indexOf('image/') !== -1 && !file.reader) {\r\n            file.reader = new FileReader();\r\n\r\n            file.reader.onload = function(e) {\r\n                info.dataUrl = e.target.result;\r\n                \r\n                if (this.props.thumbs) {\r\n                    this.resize(info.dataUrl, function(dataUrl) {\r\n                        info.dataUrl = dataUrl;\r\n                        info.ready = true;\r\n\r\n                        dmx.requestUpdate();\r\n                    })\r\n                } else {\r\n                    info.ready = true;\r\n                }\r\n\r\n                dmx.requestUpdate();\r\n            }.bind(this);\r\n\r\n            file.reader.readAsDataURL(file);\r\n        } else {\r\n            info.ready = true;\r\n        }\r\n\r\n        var upload = {\r\n            retries: this.maxRetries,\r\n            info: info,\r\n            file: file,\r\n            xhr: null\r\n        };\r\n\r\n        this.uploads.push(upload);\r\n\r\n        this.set({\r\n            files: this.data.files.concat([info]),\r\n            state: {\r\n                idle: false,\r\n                ready: true,\r\n                uploading: false,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        if (this.props.autoupload) {\r\n            if (!this.isUploading()) {\r\n                this.dispatchEvent('start');\r\n            }\r\n\r\n            this.upload(upload);\r\n        }\r\n    },\r\n\r\n    updateFiles: function(files) {\r\n        dmx.array(files).forEach(function(file) {\r\n            this.updateFile(file);\r\n        }, this);\r\n    },\r\n\r\n    updateFilesFromItems: function(items) {\r\n        dmx.array(items).forEach(function(item) {\r\n            var entry;\r\n\r\n            if (item.webkitGetAsEntry && (entry = item.webkitGetAsEntry())) {\r\n                if (entry.isFile) {\r\n                    this.updateFile(item.getAsFile());\r\n                } else if (entry.isDirectory) {\r\n                    this.updateFilesFromDirectory(entry);\r\n                }\r\n            } else if (item.getAsFile) {\r\n                if (!item.kind || item.kind == 'file') {\r\n                    this.updateFile(item.getAsFile());\r\n                }\r\n            }\r\n        }, this);\r\n    },\r\n\r\n    updateFilesFromDirectory: function(directory, path) {\r\n        var reader = directory.createReader();\r\n        var readEntries = function() {\r\n            reader.readEntries(function(entries) {\r\n                if (entries.length) {\r\n                    entries.forEach(function(entry) {\r\n                        if (entry.isFile) {\r\n                            entry.file(function(file) {\r\n                                file.fullPath = path + '/' + file.name;\r\n                                this.updateFile(file);\r\n                            }.bind(this));\r\n                        } else if (entry.isDirectory) {\r\n                            this.updateFilesFromDirectory(entry, path + '/' + entry.name);\r\n                        }\r\n                    }, this);\r\n                }\r\n\r\n                readEntries();\r\n            }.bind(this), function(err) {\r\n                console.warn(err);\r\n            }.bind(this));\r\n        }.bind(this);\r\n\r\n        readEntries();\r\n    },\r\n\r\n    abort: function() {\r\n        this.uploads.forEach(function(upload) {\r\n            if (upload.xhr) upload.xhr.abort();\r\n        });\r\n    },\r\n\r\n    reset: function() {\r\n        this.abort();\r\n\r\n        this.uploads = [];\r\n\r\n        this.set({\r\n            data: null,\r\n            files: [],\r\n            state: {\r\n                idle: true,\r\n                ready: false,\r\n                uploading: false\r\n            },\r\n            lastError: ''\r\n        });\r\n    },\r\n\r\n    remove: function(id) {\r\n        var index = this.uploads.findIndex(function(upload) {\r\n            return upload.file.id == id;\r\n        });\r\n\r\n        if (index != -1) {\r\n            if (this.uploads[index].xhr) {\r\n                this.uploads[index].xhr.abort();\r\n            }\r\n            this.uploads.splice(index, 1);\r\n            this.data.files.splice(index, 1);\r\n            dmx.requestUpdate();\r\n        }\r\n    },\r\n\r\n    startUpload: function() {\r\n        this.dispatchEvent('start');\r\n\r\n        this.uploads.forEach(function(upload) {\r\n            this.upload(upload);\r\n        }, this);\r\n    },\r\n\r\n    upload: function(upload) {\r\n        if (upload.info && upload.info.uploading) return;\r\n\r\n        if (!this.props.url) {\r\n            this.onError('No url attribute is set');\r\n            return;\r\n        }\r\n\r\n        this.set({\r\n            state: {\r\n                idle: false,\r\n                ready: false,\r\n                uploading: true,\r\n                done: false\r\n            }\r\n        });\r\n\r\n        upload.info.uploading = true;\r\n        \r\n        dmx.requestUpdate();\r\n\r\n        upload.xhr = new XMLHttpRequest();\r\n        upload.xhr.onabort = this.onAbort.bind(this, upload);\r\n        upload.xhr.onerror = this.onError.bind(this, upload);\r\n        upload.xhr.ontimeout = this.onTimeout.bind(this, upload);\r\n        upload.xhr.onload = this.upload2.bind(this, upload);\r\n        upload.xhr.open('GET', this.props.url + '?name=' + encodeURIComponent(upload.file.name));\r\n        upload.xhr.send();\r\n    },\r\n\r\n    upload2: function(upload) {\r\n        try {\r\n            upload.info.data = JSON.parse(upload.xhr.responseText);\r\n            upload.url = upload.info.data[this.props.prop];\r\n            upload.xhr.onload = this.onLoad.bind(this, upload);\r\n            upload.xhr.upload.addEventListener('progress', this.onProgress.bind(this, upload));\r\n            upload.xhr.setRequestHeader('Content-Type', upload.file.type);\r\n            if (url.indexOf('x-amz-acl=') != -1) {\r\n                // could be improved\r\n                var acl = url.substr(url.indexOf('x-amz-acl=') + 10);\r\n                if (acl.indexOf('&') != -1) acl = acl.substr(0, acl.indexOf('&'));\r\n                upload.xhr.setRequestHeader('x-amz-acl', acl);\r\n            }\r\n            this.upload3(upload);\r\n        } catch (err) {\r\n            this.onError(upload, err);\r\n        }\r\n    },\r\n\r\n    upload3: function(upload) {\r\n        try {\r\n            upload.xhr.open('PUT', upload.url);\r\n            upload.xhr.send(upload.file);\r\n        } catch (err) {\r\n            if (upload.retries) {\r\n                console.log('Retry upload', upload);\r\n                setTimeout(this.upload3.bind(this, upload), this.nextRetry(upload.retries--));\r\n            } else {\r\n                console.log('Error in upload', upload, err);\r\n                this.onError(upload, err);\r\n            }\r\n        }\r\n    }\r\n\r\n});"]}