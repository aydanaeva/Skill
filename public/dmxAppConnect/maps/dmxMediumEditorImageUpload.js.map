{"version":3,"sources":["extensions/imageDragDrop.js","extensions/imageUpload.js","extensions/imageLeft.js","extensions/imageRight.js","extensions/imageCenter.js","extensions/imageFull.js","extensions/imageDelete.js","extensions/imageToolbar.js"],"names":["dmx","mediumEditor","Extension","init","MediumEditor","prototype","apply","this","arguments","subscribe","onAddElement","bind","onDrag","onDrop","event","elm","on","onDragStart","target","tagName","container","util","getTopBlockContainer","classList","contains","dragging","preventDefault","stopPropagation","dataTransfer","files","length","dropEffect","remove","type","isMediumEditorElement","add","imageUpload","base","getExtensionByName","show","multiple","i","file","validateFile","insertImage","parentNode","insertBefore","InsertButton","contentDefault","contentFA","url","imageClass","figureClass","captionClass","buttons","insertButton","states","figcaption","checkState","node","nodeName","image","onClick","onDelete","range","document","createRange","selectNode","selection","getSelection","removeAllRanges","addRange","checkContentChanged","isImageSelected","deleteImage","setContent","html","replace","getContent","getSelectedParentElement","getSelectionRange","getSelectionStart","nextBlock","nextSibling","removeChild","select","insertHTML","createElement","style","display","getEditorOption","appendChild","click","data","FormData","append","name","xhr","XMLHttpRequest","open","send","onload","status","resData","responseText","JSON","parse","e","src","DataScope","insertAdjacentHTML","createHtml","setSelection","reader","FileReader","result","readAsDataURL","match","Button","action","aria","extensions","button","call","isAlreadyApplied","handleClick","updateToolbar","toolbar","align","allowMultiParagraphSelection","diffLeft","diffTop","firstButtonClass","lastButtonClass","standardizeSelectionStart","static","sticky","stickyTopOffset","updateOnEmptySelection","relativeContainer","initThrottledMethods","getToolbarElement","forEachExtension","iterator","context","forEach","command","createToolbar","id","getEditorId","className","createToolbarButtons","attachEventHandlers","li","btn","extension","buttonName","buttonOpts","ul","addBuiltInExtension","getButton","isElement","innerHTML","querySelectorAll","destroy","getInteractionElements","getToolbarActionsElement","querySelector","throttledPositionToolbar","throttle","isActive","positionToolbarIfShown","handleBlur","handleFocus","handleEditableClick","handleEditableKeyup","documentElement","handleDocumentMouseup","window","handleWindowScroll","handleWindowResize","isDescendant","setTimeout","clearTimeout","hideTimeout","delayShowTimeout","hideToolbar","isDisplayed","showToolbar","trigger","getFocusedElement","isToolbarDefaultActionsDisplayed","hideToolbarDefaultActions","showToolbarDefaultActions","hideExtensionForms","delay","hasForm","hideForm","multipleBlockElementsSelected","regexBlockElements","RegExp","blockContainerElementNames","join","hasMultiParagraphs","getSelectionHtml","modifySelection","selectionRange","getRangeAt","startContainer","nodeValue","startOffset","adjacentNode","findAdjacentTextNodeWithContent","getSelectionElement","offset","substr","trim","endContainer","endOffset","preventSelectionUpdates","selectionElement","getEditorElements","indexOf","getAttribute","showAndUpdateToolbar","setToolbarButtonStates","setToolbarPosition","setInactive","checkActiveButtons","manualStateChecks","queryState","updateExtensionState","setActive","queryCommandState","push","some","element","isCollapsed","positionStaticToolbar","positionToolbar","left","targetLeft","scrollTop","body","windowWidth","innerWidth","toolbarElement","containerRect","getBoundingClientRect","containerTop","top","containerCenter","width","toolbarHeight","offsetHeight","toolbarWidth","offsetWidth","halfOffsetWidth","right","Math","ceil","boundary","height","nodeType","middleBoundary","elementsContainerBoundary","containerWidth","defaultLeft","elementsContainer","elementsContainerAbsolute","getComputedStyle","getPropertyValue","positions","relativeBoundary","key","pageYOffset","isNaN"],"mappings":"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","file":"../dmxMediumEditorImageUpload/dmxMediumEditorImageUpload.js","sourcesContent":["dmx.mediumEditor.Extension('image-drag-drop', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('addElement', this.onAddElement.bind(this));\r\n        this.subscribe('editableDrag', this.onDrag.bind(this));\r\n        this.subscribe('editableDrop', this.onDrop.bind(this));\r\n    },\r\n\r\n    onAddElement: function(event, elm) {\r\n        this.on(elm, 'dragstart', this.onDragStart.bind(this));\r\n    },\r\n\r\n    onDragStart: function(event) {\r\n        if (event.target.tagName == 'IMG') {\r\n            var container = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n            if (container.classList.contains('medium-editor-image-upload')) {\r\n                this.dragging = container;\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.dragging = null;\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n    },\r\n\r\n    onDrag: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (event.dataTransfer.files.length) {\r\n            event.dataTransfer.dropEffect = 'copy';\r\n        }\r\n\r\n        var target = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n        if (target) {\r\n            target.classList.remove('medium-editor-image-upload-drop');\r\n\r\n            if (event.type === 'dragover') {\r\n                if (!MediumEditor.util.isMediumEditorElement(target)) {\r\n                    target.classList.add('medium-editor-image-upload-drop');\r\n                }\r\n            }\r\n        }\r\n    },\r\n\r\n    onDrop: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        var target = MediumEditor.util.getTopBlockContainer(event.target);\r\n\r\n        if (target) {\r\n            target.classList.remove('medium-editor-image-upload-drop');\r\n\r\n            if (event.dataTransfer.files.length) {\r\n                var imageUpload = this.base.getExtensionByName('image-upload');\r\n\r\n                if (!imageUpload) {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Error getting image upload extension.');\r\n                    return;\r\n                }\r\n\r\n\r\n                if (!MediumEditor.util.isMediumEditorElement(target)) {\r\n                    var files = event.dataTransfer.files;\r\n\r\n                    if (!imageUpload.multiple && files.length > 1) {\r\n                        var alert = this.base.getExtensionByName('alert');\r\n                        alert.show('Only 1 file please!');\r\n                        return;\r\n                    }\r\n\r\n                    for (var i = 0; i < files.length; i++) {\r\n                        var file = files[i];\r\n\r\n                        if (imageUpload.validateFile(file)) {\r\n                            imageUpload.insertImage(target, file);\r\n                        }\r\n                    }\r\n                }\r\n            } else if (this.dragging) {\r\n                target.parentNode.insertBefore(this.dragging, target);\r\n            }\r\n        }\r\n\r\n        this.dragging = null;\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.InsertButton('image-upload', {\r\n\r\n    contentDefault: '<b>IMG</b>',\r\n    contentFA: '<i class=\"fa fa-camera\"></i>',\r\n\r\n    multiple: true,\r\n    url: '',\r\n    imageClass: '',\r\n    figureClass: '',\r\n    captionClass: '',\r\n    buttons: ['imageLeft', 'imageCenter', 'imageRight', 'imageFull', 'imageDelete'],\r\n\r\n    init: function() {\r\n        dmx.mediumEditor.insertButton.prototype.init.apply(this, arguments);\r\n\r\n        dmx.mediumEditor.states.figcaption = {\r\n            buttons: ['bold', 'italic', 'underline', 'strikethrough', 'subscript', 'superscript', 'anchor', 'removeFormat'],\r\n            checkState: function(node) {\r\n                return node.nodeName == 'FIGCAPTION';\r\n            }\r\n        };\r\n\r\n        dmx.mediumEditor.states.image = {\r\n            buttons: this.buttons,\r\n            checkState: function(node) {\r\n                return node.nodeName == 'IMG';\r\n            }\r\n        }\r\n\r\n        this.subscribe('editableClick', this.onClick.bind(this));\r\n        this.subscribe('editableKeydownDelete', this.onDelete.bind(this));\r\n    },\r\n\r\n    onClick: function(event) {\r\n        if (event.target && event.target.nodeName == 'IMG') {\r\n            var range = this.document.createRange();\r\n            range.selectNode(event.target);\r\n\r\n            var selection  = this.document.getSelection();\r\n            selection.removeAllRanges();\r\n            selection.addRange(range);\r\n\r\n            this.base.checkContentChanged();\r\n\r\n            /*var self = this;\r\n            setTimeout(function() {\r\n                var toolbar = self.base.getExtensionByName('imageToolbar');\r\n                toolbar.showAndUpdateToolbar();\r\n            }, 0);*/\r\n        }\r\n    },\r\n\r\n    onDelete: function(event) {\r\n        if (this.isImageSelected()) {\r\n            event.preventDefault();\r\n            this.deleteImage();\r\n        }\r\n    },\r\n\r\n    setContent: function (html) {\r\n        return html\r\n            .replace(/<div([^>]*)>\\s*<figure/gi, '<div$1 contenteditable=\"false\"><figure')\r\n            .replace(/<figcaption([^>]*)>/gi, '<figcaption$1 contenteditable=\"true\">')\r\n            .replace(/<\\/div>\\s*$/gi, '</div><p><br></p>');\r\n    },\r\n\r\n    getContent: function (html) {\r\n        return html\r\n            .replace(/contenteditable=\"[^\"]*\"/gi, '')\r\n            .replace(/\\s*<p[^>]*>\\s*<br[^>]*>\\s*<\\/p[^>]*>\\s*$/gi, '');\r\n    },\r\n\r\n    isImageSelected: function() {\r\n        return MediumEditor.selection.getSelectedParentElement(MediumEditor.selection.getSelectionRange(this.document)).nodeName == 'IMG';\r\n    },\r\n\r\n    deleteImage: function() {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        var nextBlock = container.nextSibling;\r\n        container.parentNode.removeChild(container);\r\n        MediumEditor.selection.select(this.document, nextBlock);\r\n        this.base.checkContentChanged();\r\n    },\r\n\r\n    insertHTML: function(elm) {\r\n        var file = this.document.createElement('input');\r\n        file.style.display = 'none';\r\n        file.multiple = this.multiple;\r\n        file.type = 'file';\r\n        this.on(file, 'change', (function(event) {\r\n            var files = event.target.files;\r\n\r\n            for (var i = 0; i < files.length; i++) {\r\n                var file = files[i];\r\n\r\n                if (!this.multiple && files.length > 1) {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Only 1 file please!');\r\n                    return;\r\n                }\r\n\r\n                if (this.validateFile(file)) {\r\n                    this.insertImage(elm, file);\r\n                }\r\n            }\r\n        }).bind(this));\r\n        this.getEditorOption('elementsContainer').appendChild(file);\r\n        file.click();\r\n    },\r\n\r\n    insertImage: function(elm, file) {\r\n        if (!this.url) {\r\n            var reader = new FileReader();\r\n            reader.onload = function(e) {\r\n                elm.insertAdjacentHTML('beforebegin', this.createHtml(e.target.result));\r\n                //this.base.checkContentChanged();\r\n                this.setSelection();\r\n            }.bind(this);\r\n            reader.readAsDataURL(file);\r\n        } else {\r\n            var data = new FormData();\r\n            data.append('image', file, file.name);\r\n\r\n            var xhr = new XMLHttpRequest();\r\n            xhr.open('POST', this.url, true);\r\n            xhr.send(data);\r\n            xhr.onload = (function() {\r\n                if (xhr.status == 200) {\r\n                    var resData = xhr.responseText;\r\n\r\n                    try {\r\n                        resData = JSON.parse(resData);\r\n                    } catch(e) {\r\n                        var alert = this.base.getExtensionByName('alert');\r\n                        alert.show('Invalid response from server.');\r\n                        return;\r\n                    }\r\n                    var src = dmx.parse('url', new dmx.DataScope(resData, this));\r\n                    elm.insertAdjacentHTML('beforebegin', this.createHtml(src));\r\n                    //this.base.checkContentChanged();\r\n                    this.setSelection();\r\n                } else {\r\n                    var alert = this.base.getExtensionByName('alert');\r\n                    alert.show('Error uploading image.');\r\n                }\r\n            }).bind(this);\r\n        }\r\n    },\r\n\r\n    validateFile: function(file) {\r\n        return !!file.type.match('image.*');\r\n    },\r\n\r\n    createHtml: function(src) {\r\n        return '<div contenteditable=\"false\" class=\"medium-editor-image-upload medium-editor-image-upload-center\"><figure class=\"' + this.figureClass + '\"><img class=\"' + this.imageClass + '\" src=\"' + src + '\"><figcaption class=\"' + this.captionClass + '\" contenteditable=\"true\" data-placeholder=\"Image caption\"></figcaption></figure></div>';\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Button('imageLeft', {\r\n    contentDefault: '<b>Left</b>',\r\n    contentFA: '<i class=\"fa fa-align-left\"></i>',\r\n    action: 'float-left',\r\n    aria: 'Align image left',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-left');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-right','medium-editor-image-upload-center','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-left');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageRight', {\r\n    contentDefault: '<b>Right</b>',\r\n    contentFA: '<i class=\"fa fa-align-right\"></i>',\r\n    action: 'float-right',\r\n    aria: 'Align image right',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-right');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-center','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-right');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageCenter', {\r\n    contentDefault: '<b>Center</b>',\r\n    contentFA: '<i class=\"fa fa-align-center\"></i>',\r\n    action: 'image-center',\r\n    aria: 'Align image center',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-center');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-right','medium-editor-image-upload-full');\r\n            container.classList.add('medium-editor-image-upload-center');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageFull', {\r\n    contentDefault: '<b>100%</b>',\r\n    contentFA: '<i class=\"fa fa-align-justify\"></i>',\r\n    action: 'image-full',\r\n    aria: 'Image full width',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    isAlreadyApplied: function(node) {\r\n        return node.classList.contains('medium-editor-image-upload-full');\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        if (container.classList.contains('medium-editor-image-upload')) {\r\n            container.classList.remove('medium-editor-image-upload-left','medium-editor-image-upload-right','medium-editor-image-upload-center');\r\n            container.classList.add('medium-editor-image-upload-full');\r\n        }\r\n        this.updateToolbar();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Button('imageDelete', {\r\n    contentDefault: '<b>Remove</b>',\r\n    contentFA: '<i class=\"fa fa-trash\"></i>',\r\n    action: 'delete-image',\r\n    aria: 'Remove image',\r\n\r\n    init: function() {\r\n        MediumEditor.extensions.button.prototype.init.call(this);\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        var container = MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document));\r\n        var nextBlock = container.nextSibling;\r\n        container.parentNode.removeChild(container);\r\n        MediumEditor.selection.select(this.document, nextBlock);\r\n        this.updateToolbar();\r\n        this.base.checkContentChanged();\r\n    },\r\n\r\n    updateToolbar: function() {\r\n        var toolbar = this.base.getExtensionByName('image-toolbar');\r\n        if (toolbar) {\r\n            toolbar.checkState();\r\n        }\r\n    }\r\n});\r\n","dmx.mediumEditor.Extension('image-toolbar', {\r\n    /* Toolbar Options */\r\n\r\n    /* align: ['left'|'center'|'right']\r\n     * When the __static__ option is true, this aligns the static toolbar\r\n     * relative to the medium-editor element.\r\n     */\r\n    align: 'center',\r\n\r\n    /* allowMultiParagraphSelection: [boolean]\r\n     * enables/disables whether the toolbar should be displayed when\r\n     * selecting multiple paragraphs/block elements\r\n     */\r\n    allowMultiParagraphSelection: true,\r\n\r\n    /* buttons: [Array]\r\n     * the names of the set of buttons to display on the toolbar.\r\n     */\r\n    buttons: ['imageLeft', 'imageCenter', 'imageRight', 'imageFull', 'imageDelete'],\r\n\r\n    /* diffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the toolbar.\r\n     */\r\n    diffLeft: 0,\r\n\r\n    /* diffTop: [Number]\r\n     * value in pixels to be added to the Y axis positioning of the toolbar.\r\n     */\r\n    diffTop: -10,\r\n\r\n    /* firstButtonClass: [string]\r\n     * CSS class added to the first button in the toolbar.\r\n     */\r\n    firstButtonClass: 'medium-editor-button-first',\r\n\r\n    /* lastButtonClass: [string]\r\n     * CSS class added to the last button in the toolbar.\r\n     */\r\n    lastButtonClass: 'medium-editor-button-last',\r\n\r\n    /* standardizeSelectionStart: [boolean]\r\n     * enables/disables standardizing how the beginning of a range is decided\r\n     * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\r\n     */\r\n    standardizeSelectionStart: false,\r\n\r\n    /* static: [boolean]\r\n     * enable/disable the toolbar always displaying in the same location\r\n     * relative to the medium-editor element.\r\n     */\r\n    static: false,\r\n\r\n    /* sticky: [boolean]\r\n     * When the __static__ option is true, this enables/disables the toolbar\r\n     * \"sticking\" to the viewport and staying visible on the screen while\r\n     * the page scrolls.\r\n     */\r\n    sticky: false,\r\n\r\n    /* stickyTopOffset: [Number]\r\n     * Value in pixel of the top offset above the toolbar\r\n     */\r\n    stickyTopOffset: 0,\r\n\r\n    /* updateOnEmptySelection: [boolean]\r\n     * When the __static__ option is true, this enables/disables updating\r\n     * the state of the toolbar buttons even when the selection is collapsed\r\n     * (there is no selection, just a cursor).\r\n     */\r\n    updateOnEmptySelection: false,\r\n\r\n    /* relativeContainer: [node]\r\n     * appending the toolbar to a given node instead of body\r\n     */\r\n    relativeContainer: null,\r\n\r\n    init: function () {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.initThrottledMethods();\r\n\r\n        if (!this.relativeContainer) {\r\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\r\n        } else {\r\n            this.relativeContainer.appendChild(this.getToolbarElement());\r\n        }\r\n    },\r\n\r\n    // Helper method to execute method for every extension, but ignoring the toolbar extension\r\n    forEachExtension: function (iterator, context) {\r\n        return this.base.extensions.forEach(function (command) {\r\n            if (command === this) {\r\n                return;\r\n            }\r\n            return iterator.apply(context || this, arguments);\r\n        }, this);\r\n    },\r\n\r\n    // Toolbar creation/deletion\r\n\r\n    createToolbar: function () {\r\n        var toolbar = this.document.createElement('div');\r\n\r\n        toolbar.id = 'medium-editor-image-toolbar-' + this.getEditorId();\r\n        toolbar.className = 'medium-editor-toolbar';\r\n\r\n        if (this.static) {\r\n            toolbar.className += ' static-toolbar';\r\n        } else if (this.relativeContainer) {\r\n            toolbar.className += ' medium-editor-relative-toolbar';\r\n        } else {\r\n            toolbar.className += ' medium-editor-stalker-toolbar';\r\n        }\r\n\r\n        toolbar.appendChild(this.createToolbarButtons());\r\n\r\n        this.attachEventHandlers();\r\n\r\n        return toolbar;\r\n    },\r\n\r\n    createToolbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li,\r\n            btn,\r\n            buttons,\r\n            extension,\r\n            buttonName,\r\n            buttonOpts;\r\n\r\n        ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-toolbar-actions';\r\n        ul.style.display = 'block';\r\n\r\n        this.buttons.forEach(function (button) {\r\n            if (typeof button === 'string') {\r\n                buttonName = button;\r\n                buttonOpts = null;\r\n            } else {\r\n                buttonName = button.name;\r\n                buttonOpts = button;\r\n            }\r\n\r\n            // If the button already exists as an extension, it'll be returned\r\n            // othwerise it'll create the default built-in button\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getButton === 'function') {\r\n                btn = extension.getButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        buttons = ul.querySelectorAll('button');\r\n        if (buttons.length > 0) {\r\n            buttons[0].classList.add(this.firstButtonClass);\r\n            buttons[buttons.length - 1].classList.add(this.lastButtonClass);\r\n        }\r\n\r\n        return ul;\r\n    },\r\n\r\n    destroy: function () {\r\n        if (this.toolbar) {\r\n            if (this.toolbar.parentNode) {\r\n                this.toolbar.parentNode.removeChild(this.toolbar);\r\n            }\r\n            delete this.toolbar;\r\n        }\r\n    },\r\n\r\n    // Toolbar accessors\r\n\r\n    getInteractionElements: function () {\r\n        return [this.getToolbarElement()];\r\n    },\r\n\r\n    getToolbarElement: function () {\r\n        if (!this.toolbar) {\r\n            this.toolbar = this.createToolbar();\r\n        }\r\n\r\n        return this.toolbar;\r\n    },\r\n\r\n    getToolbarActionsElement: function () {\r\n        return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\r\n    },\r\n\r\n    // Toolbar event handlers\r\n\r\n    initThrottledMethods: function () {\r\n        // throttledPositionToolbar is throttled because:\r\n        // - It will be called when the browser is resizing, which can fire many times very quickly\r\n        // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\r\n        this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\r\n            if (this.base.isActive) {\r\n                this.positionToolbarIfShown();\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    attachEventHandlers: function () {\r\n        // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\r\n        this.subscribe('blur', this.handleBlur.bind(this));\r\n        this.subscribe('focus', this.handleFocus.bind(this));\r\n\r\n        // Updating the state of the toolbar as things change\r\n        this.subscribe('editableClick', this.handleEditableClick.bind(this));\r\n        this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\r\n\r\n        // Handle mouseup on document for updating the selection in the toolbar\r\n        this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\r\n\r\n        // Add a scroll event for sticky toolbar\r\n        if (this.static && this.sticky) {\r\n            // On scroll (capture), re-position the toolbar\r\n            this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\r\n        }\r\n\r\n        // On resize, re-position the toolbar\r\n        this.on(this.window, 'resize', this.handleWindowResize.bind(this));\r\n    },\r\n\r\n    handleWindowScroll: function () {\r\n        this.positionToolbarIfShown();\r\n    },\r\n\r\n    handleWindowResize: function () {\r\n        this.throttledPositionToolbar();\r\n    },\r\n\r\n    handleDocumentMouseup: function (event) {\r\n        // Do not trigger checkState when mouseup fires over the toolbar\r\n        if (event && event.target && MediumEditor.util.isDescendant(this.getToolbarElement(), event.target)) {\r\n            return false;\r\n        }\r\n        this.checkState();\r\n    },\r\n\r\n    handleEditableClick: function () {\r\n        // Delay the call to checkState to handle bug where selection is empty\r\n        // immediately after clicking inside a pre-existing selection\r\n        setTimeout(function () {\r\n            this.checkState();\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    handleEditableKeyup: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleBlur: function () {\r\n        // Kill any previously delayed calls to hide the toolbar\r\n        clearTimeout(this.hideTimeout);\r\n\r\n        // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\r\n        // calls from happening in this specific case\r\n        clearTimeout(this.delayShowTimeout);\r\n\r\n        // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\r\n        this.hideTimeout = setTimeout(function () {\r\n            this.hideToolbar();\r\n        }.bind(this), 1);\r\n    },\r\n\r\n    handleFocus: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    // Hiding/showing toolbar\r\n\r\n    isDisplayed: function () {\r\n        return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\r\n    },\r\n\r\n    showToolbar: function () {\r\n        clearTimeout(this.hideTimeout);\r\n        if (!this.isDisplayed()) {\r\n            this.getToolbarElement().classList.add('medium-editor-toolbar-active');\r\n            this.trigger('showToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideToolbar: function () {\r\n        if (this.isDisplayed()) {\r\n            this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\r\n            this.trigger('hideToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isToolbarDefaultActionsDisplayed: function () {\r\n        return this.getToolbarActionsElement().style.display === 'block';\r\n    },\r\n\r\n    hideToolbarDefaultActions: function () {\r\n        if (this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'none';\r\n        }\r\n    },\r\n\r\n    showToolbarDefaultActions: function () {\r\n        this.hideExtensionForms();\r\n\r\n        if (!this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'block';\r\n        }\r\n\r\n        // Using setTimeout + options.delay because:\r\n        // We will actually be displaying the toolbar, which should be controlled by options.delay\r\n        this.delayShowTimeout = this.base.delay(function () {\r\n            this.showToolbar();\r\n        }.bind(this));\r\n    },\r\n\r\n    hideExtensionForms: function () {\r\n        // Hide all extension forms\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm && extension.isDisplayed()) {\r\n                extension.hideForm();\r\n            }\r\n        });\r\n    },\r\n\r\n    // Responding to changes in user selection\r\n\r\n    // Checks for existance of multiple block elements in the current selection\r\n    multipleBlockElementsSelected: function () {\r\n        var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\r\n            regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\r\n            selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\r\n            hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\r\n\r\n        return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\r\n    },\r\n\r\n    modifySelection: function () {\r\n        var selection = this.window.getSelection(),\r\n            selectionRange = selection.getRangeAt(0);\r\n\r\n        /*\r\n        * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\r\n        * will be at the very end of an element.  In other browsers, the selectionRange start\r\n        * would instead be at the very beginning of an element that actually has content.\r\n        * example:\r\n        *   <span>foo</span><span>bar</span>\r\n        *\r\n        * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\r\n        * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\r\n        * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\r\n        * properties on the 'bar' span, they won't be reflected accurately in the toolbar\r\n        * (ie 'Bold' button wouldn't be active)\r\n        *\r\n        * So, for cases where the selectionRange start is at the end of an element/node, find the next\r\n        * adjacent text node that actually has content in it, and move the selectionRange start there.\r\n        */\r\n        if (this.standardizeSelectionStart &&\r\n                selectionRange.startContainer.nodeValue &&\r\n                (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\r\n            var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\r\n            if (adjacentNode) {\r\n                var offset = 0;\r\n                while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\r\n                    offset = offset + 1;\r\n                }\r\n                selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\r\n                    selectionRange.endContainer, selectionRange.endOffset);\r\n            }\r\n        }\r\n    },\r\n\r\n    checkState: function () {\r\n        if (this.base.preventSelectionUpdates) {\r\n            return;\r\n        }\r\n\r\n        // If no editable has focus\r\n        // hide toolbar\r\n        if (!this.base.getFocusedElement()) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        // If there's no selection element, selection element doesn't belong to this editor\r\n        // or toolbar is disabled for this selection element\r\n        // hide toolbar\r\n        var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\r\n        if (!selectionElement ||\r\n                this.getEditorElements().indexOf(selectionElement) === -1 ||\r\n                selectionElement.getAttribute('data-disable-toolbar')) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        // Now we know there's a focused editable with a selection\r\n\r\n        if (MediumEditor.selection.getSelectedParentElement(MediumEditor.selection.getSelectionRange(this.document)).nodeName == 'IMG') {\r\n            this.showAndUpdateToolbar();\r\n        }\r\n\r\n        this.hideToolbar();\r\n    },\r\n\r\n    // Updating the toolbar\r\n\r\n    showAndUpdateToolbar: function () {\r\n        this.modifySelection();\r\n        this.setToolbarButtonStates();\r\n        this.trigger('positionToolbar', {}, this.base.getFocusedElement());\r\n        this.showToolbarDefaultActions();\r\n        this.setToolbarPosition();\r\n    },\r\n\r\n    setToolbarButtonStates: function () {\r\n        this.forEachExtension(function (extension) {\r\n            if (typeof extension.isActive === 'function' &&\r\n                typeof extension.setInactive === 'function') {\r\n                extension.setInactive();\r\n            }\r\n        });\r\n\r\n        this.checkActiveButtons();\r\n    },\r\n\r\n    checkActiveButtons: function () {\r\n        var manualStateChecks = [],\r\n            queryState = null,\r\n            selectionRange = MediumEditor.selection.getSelectionRange(this.document),\r\n            parentNode,\r\n            updateExtensionState = function (extension) {\r\n                if (typeof extension.checkState === 'function') {\r\n                    extension.checkState(parentNode);\r\n                } else if (typeof extension.isActive === 'function' &&\r\n                           typeof extension.isAlreadyApplied === 'function' &&\r\n                           typeof extension.setActive === 'function') {\r\n                    if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\r\n                        extension.setActive();\r\n                    }\r\n                }\r\n            };\r\n\r\n        if (!selectionRange) {\r\n            return;\r\n        }\r\n\r\n        // Loop through all extensions\r\n        this.forEachExtension(function (extension) {\r\n            // For those extensions where we can use document.queryCommandState(), do so\r\n            if (typeof extension.queryCommandState === 'function') {\r\n                queryState = extension.queryCommandState();\r\n                // If queryCommandState returns a valid value, we can trust the browser\r\n                // and don't need to do our manual checks\r\n                if (queryState !== null) {\r\n                    if (queryState && typeof extension.setActive === 'function') {\r\n                        extension.setActive();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            // We can't use queryCommandState for this extension, so add to manualStateChecks\r\n            manualStateChecks.push(extension);\r\n        });\r\n\r\n        parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\r\n\r\n        // Make sure the selection parent isn't outside of the contenteditable\r\n        if (!this.getEditorElements().some(function (element) {\r\n                return MediumEditor.util.isDescendant(element, parentNode, true);\r\n            })) {\r\n            return;\r\n        }\r\n\r\n        // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\r\n        while (parentNode) {\r\n            manualStateChecks.forEach(updateExtensionState);\r\n\r\n            // we can abort the search upwards if we leave the contentEditable element\r\n            if (MediumEditor.util.isMediumEditorElement(parentNode)) {\r\n                break;\r\n            }\r\n            parentNode = parentNode.parentNode;\r\n        }\r\n    },\r\n\r\n    // Positioning toolbar\r\n\r\n    positionToolbarIfShown: function () {\r\n        if (this.isDisplayed()) {\r\n            this.setToolbarPosition();\r\n        }\r\n    },\r\n\r\n    setToolbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        // If there isn't a valid selection, bail\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        if (this.static || !selection.isCollapsed) {\r\n            // we don't need any absolute positioning if relativeContainer is set\r\n            if (!this.relativeContainer) {\r\n                if (this.static) {\r\n                    this.positionStaticToolbar(container);\r\n                } else {\r\n                    this.positionToolbar(selection);\r\n                }\r\n            }\r\n\r\n            this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showToolbar();\r\n        }\r\n    },\r\n\r\n    positionStaticToolbar: function (container) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n\r\n        // document.documentElement for IE 9\r\n        var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\r\n            windowWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            containerRect = container.getBoundingClientRect(),\r\n            containerTop = containerRect.top + scrollTop,\r\n            containerCenter = (containerRect.left + (containerRect.width / 2)),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            targetLeft;\r\n\r\n        if (this.sticky) {\r\n            // If it's beyond the height of the editor, position it at the bottom of the editor\r\n            if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n            // Stick the toolbar to the top of the window\r\n            } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.classList.add('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = this.stickyTopOffset + 'px';\r\n            // Normal static toolbar position\r\n            } else {\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n            }\r\n        } else {\r\n            toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n        }\r\n\r\n        switch (this.align) {\r\n            case 'left':\r\n                targetLeft = containerRect.left;\r\n                break;\r\n\r\n            case 'right':\r\n                targetLeft = containerRect.right - toolbarWidth;\r\n                break;\r\n\r\n            case 'center':\r\n                targetLeft = containerCenter - halfOffsetWidth;\r\n                break;\r\n        }\r\n\r\n        if (targetLeft < 0) {\r\n            targetLeft = 0;\r\n        } else if ((targetLeft + toolbarWidth) > windowWidth) {\r\n            targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\r\n        }\r\n\r\n        toolbarElement.style.left = targetLeft + 'px';\r\n    },\r\n\r\n    positionToolbar: function (selection) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n        this.getToolbarElement().style.right = 'initial';\r\n\r\n        var range = selection.getRangeAt(0),\r\n            boundary = range.getBoundingClientRect();\r\n\r\n        // Handle selections with just images\r\n        if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\r\n            // If there's a nested image, use that for the bounding rectangle\r\n            if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\r\n                boundary = range.startContainer.querySelector('img').getBoundingClientRect();\r\n            } else {\r\n                boundary = range.startContainer.getBoundingClientRect();\r\n            }\r\n        }\r\n\r\n        var containerWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            buttonHeight = 50,\r\n            defaultLeft = this.diffLeft - halfOffsetWidth,\r\n            elementsContainer = this.getEditorOption('elementsContainer'),\r\n            elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\r\n            positions = {},\r\n            relativeBoundary = {},\r\n            middleBoundary, elementsContainerBoundary;\r\n\r\n        // If container element is absolute / fixed, recalculate boundaries to be relative to the container\r\n        if (elementsContainerAbsolute) {\r\n            elementsContainerBoundary = elementsContainer.getBoundingClientRect();\r\n            ['top', 'left'].forEach(function (key) {\r\n                relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\r\n            });\r\n\r\n            relativeBoundary.width = boundary.width;\r\n            relativeBoundary.height = boundary.height;\r\n            boundary = relativeBoundary;\r\n\r\n            containerWidth = elementsContainerBoundary.width;\r\n\r\n            // Adjust top position according to container scroll position\r\n            positions.top = elementsContainer.scrollTop;\r\n        } else {\r\n            // Adjust top position according to window scroll position\r\n            positions.top = this.window.pageYOffset;\r\n        }\r\n\r\n        middleBoundary = boundary.left + boundary.width / 2;\r\n        positions.top += boundary.top - toolbarHeight;\r\n\r\n        if (boundary.top < buttonHeight) {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-over');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-under');\r\n            positions.top += buttonHeight + boundary.height - this.diffTop;\r\n        } else {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-under');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-over');\r\n            positions.top += this.diffTop;\r\n        }\r\n\r\n        if (middleBoundary < halfOffsetWidth) {\r\n            positions.left = defaultLeft + halfOffsetWidth;\r\n            positions.right = 'initial';\r\n        } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\r\n            positions.left = 'auto';\r\n            positions.right = 0;\r\n        } else {\r\n            positions.left = defaultLeft + middleBoundary;\r\n            positions.right = 'initial';\r\n        }\r\n\r\n        ['top', 'left', 'right'].forEach(function (key) {\r\n            toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\r\n        });\r\n    }\r\n});\r\n"]}