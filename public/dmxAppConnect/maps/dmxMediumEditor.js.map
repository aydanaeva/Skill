{"version":3,"sources":["core/base.js","components/mediumEditor.js","extensions/alert.js","extensions/handleSelection.js","extensions/toolbar.js","extensions/toolbarStates.js","extensions/autoList.js"],"names":["MediumEditor","alert","dmx","mediumEditor","extensions","Extension","name","cfg","extend","Button","button","insertButton","aria","undefined","contentDefault","contentFA","classList","attrs","insertHTML","init","prototype","apply","this","arguments","createButton","on","handleClick","bind","getInsertButton","getAria","base","options","document","createElement","content","ariaLabel","add","forEach","className","setAttribute","Object","keys","attr","getEditorOption","innerHTML","event","preventDefault","stopPropagation","topBlockContainer","getFocusedElement","querySelector","insertAdjacentHTML","setSelection","trigger","selection","moveCursor","focus","getExtensionByName","checkState","InsertButton","Component","data","value","attributes","editable","type","Boolean","default","placeholder","String","static","align","buttons","Array","disable-return","disable-double-return","disable-extra-spaces","disable-spellcheck","target-blank","auto-link","auto-list","fontawesome","methods","setValue","events","changed","Event","updated","render","node","$node","mounted","tagName","trim","indexOf","$addBinding","update","props","JSON","stringify","destroyEditor","initEditor","updatedValue","editor","set","getContent","nextTick","dispatchEvent","setContent","parse","split","buttonLabels","disableReturn","disableDoubleReturn","disableExtraSpaces","spellcheck","targetBlank","autoLink","toolbar","sticky","updateOnEmptySelection","anchorPreview","showWhenToolbarIsVisible","text","hideOnClick","initExtensions","dmxComponent","subscribe","imageDragging","extension","config","hasAttribute","getAttribute","e","console","warn","destroy","appendChild","getAlertElement","createAlertElement","elm","id","getEditorId","hide","show","message","remove","util","keyCode","LEFT","UP","RIGHT","DOWN","checkSelection","delay","handleEditableKeydown","documentElement","getSelectionStart","offset","getCaretOffsets","getKeyCode","BACKSPACE","left","previousElementSibling","click","test","parentNode","removeChild","figure","getClosestTag","nextElementSibling","ENTER","p","insertBefore","nextSibling","html","replace","fn","setTimeout","call","getEditorElements","element","slice","querySelectorAll","sel","getSelection","rangeCount","range","getRangeAt","getContainerEditorElement","commonAncestorContainer","block","getTopBlockContainer","isMediumEditorElement","allowMultiParagraphSelection","insertDiffLeft","diffLeft","diffTop","firstButtonClass","lastButtonClass","standardizeSelectionStart","stickyTopOffset","relativeContainer","initThrottledMethods","getToolbarElement","getInsertbarElement","forEachExtension","iterator","context","command","createToolbar","createToolbarButtons","hasForm","getForm","attachEventHandlers","li","btn","buttonName","buttonOpts","ul","style","display","addBuiltInExtension","getButton","isElement","length","createInsertbar","insertbar","toggle","handleToggleClick","createInsertbarButtons","getInteractionElements","getToolbarActionsElement","getInsertbarActionsElement","throttledPositionToolbar","throttle","isActive","positionToolbarIfShown","handleBlur","handleFocus","handleEditableClick","handleEditableKeyup","handleDocumentMouseup","window","handleWindowScroll","handleWindowResize","target","isDescendant","clearTimeout","hideTimeout","delayShowTimeout","hideToolbar","hideInsertbar","isInsertbarExpanded","collapseInsertbar","expandInsertbar","isDisplayed","contains","showToolbar","isInsertbarDisplayed","showInsertbar","childNodes","isToolbarDefaultActionsDisplayed","hideToolbarDefaultActions","showToolbarDefaultActions","hideExtensionForms","hideForm","multipleBlockElementsSelected","regexBlockElements","RegExp","blockContainerElementNames","join","hasMultiParagraphs","getSelectionHtml","match","modifySelection","selectionRange","startContainer","nodeValue","startOffset","adjacentNode","findAdjacentTextNodeWithContent","getSelectionElement","substr","select","endContainer","endOffset","preventSelectionUpdates","selectionInContentEditableFalse","selectionElement","isCollapsed","showAndUpdateInsertbar","showAndUpdateToolbar","selectionContainsContent","setToolbarButtonStates","setToolbarPosition","setInsertbarPosition","setInactive","checkActiveButtons","manualStateChecks","queryState","getSelectionRange","updateExtensionState","isAlreadyApplied","setActive","queryCommandState","push","getSelectedParentElement","some","container","positionStaticToolbar","positionToolbar","textContent","rect","getBoundingClientRect","top","pageYOffset","Math","max","pageXOffset","targetLeft","scrollTop","body","windowWidth","innerWidth","toolbarElement","containerRect","containerTop","containerCenter","width","toolbarHeight","offsetHeight","toolbarWidth","offsetWidth","halfOffsetWidth","right","ceil","boundary","height","nodeType","middleBoundary","elementsContainerBoundary","containerWidth","defaultLeft","elementsContainer","elementsContainerAbsolute","getComputedStyle","getPropertyValue","positions","relativeBoundary","key","isNaN","states","headers","nodeName","pendingState","currentState","onPositionToolbar","state","firstButton","lastButton","removeProperty","setProperty","onKeypress","keyPressEvent","isKey","SPACE","list_start","execAction"],"mappings":"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","file":"../dmxMediumEditor/dmxMediumEditor.js","sourcesContent":["if (!MediumEditor) {\r\n    alert('Please insert medium-editor.js before dmxMediumEditor.js on your page.');\r\n}\r\n\r\n(function() {\r\n\r\ndmx.mediumEditor = {};\r\n\r\ndmx.mediumEditor.extensions = {};\r\n\r\ndmx.mediumEditor.Extension = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.Extension.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.Button = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.extensions.button.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.insertButton = MediumEditor.Extension.extend({\r\n\r\n    aria: undefined,\r\n\r\n    contentDefault: undefined,\r\n\r\n    contentFA: undefined,\r\n\r\n    classList: undefined,\r\n\r\n    attrs: undefined,\r\n\r\n    insertHTML: undefined,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.button = this.createButton();\r\n        this.on(this.button, 'click', this.handleClick.bind(this));\r\n    },\r\n\r\n    getInsertButton: function() {\r\n        return this.button;\r\n    },\r\n\r\n    getAria: function() {\r\n        return (typeof this.aria === 'function') ? this.aria(this.base.options) : this.aria;\r\n    },\r\n\r\n    createButton: function() {\r\n        var button = this.document.createElement('button'),\r\n            content = this.contentDefault,\r\n            ariaLabel = this.getAria();\r\n\r\n        button.classList.add('medium-editor-insertbar-action');\r\n        button.classList.add('medium-editor-insertbar-action-' + this.name);\r\n\r\n        if (this.classList) {\r\n            this.classList.forEach(function(className) {\r\n                button.classList.add(className);\r\n            });\r\n        }\r\n\r\n        if (ariaLabel) {\r\n            button.setAttribute('title', ariaLabel);\r\n            button.setAttribute('aria-label', ariaLabel);\r\n        }\r\n\r\n        if (this.attrs) {\r\n            Object.keys(this.attrs).forEach(function(attr) {\r\n                button.setAttribute(attr, this.attrs[attr]);\r\n            }, this);\r\n        }\r\n\r\n        if (this.getEditorOption('buttonLabels') === 'fontawesome' && this.contentFA) {\r\n            content = this.contentFA;\r\n        }\r\n\r\n        button.innerHTML = content;\r\n\r\n        return button;\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.insertHTML) {\r\n            //var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n            var topBlockContainer = this.base.getFocusedElement().querySelector('.medium-editor-is-selected');\r\n\r\n            if (typeof this.insertHTML === 'function') {\r\n                this.insertHTML(topBlockContainer);\r\n            } else {\r\n                topBlockContainer.insertAdjacentHTML('beforebegin', this.insertHTML);\r\n            }\r\n        }\r\n\r\n        this.setSelection();\r\n    },\r\n\r\n    setSelection: function() {\r\n        this.base.trigger('editableInput', {}, this.base.getFocusedElement());\r\n        MediumEditor.selection.moveCursor(this.document, this.base.getFocusedElement().querySelector('.medium-editor-is-selected'), 0);\r\n        this.base.getFocusedElement().focus();\r\n        this.base.getExtensionByName('toolbar').checkState();\r\n    }\r\n\r\n});\r\n\r\ndmx.mediumEditor.InsertButton = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = dmx.mediumEditor.insertButton.extend(cfg);\r\n};\r\n\r\n})();\r\n","dmx.Component('medium-editor', {\r\n\r\n    data: {\r\n        value: ''\r\n    },\r\n\r\n    attributes: {\r\n        editable: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        placeholder: {\r\n            type: String,\r\n            default: 'Type your text'\r\n        },\r\n\r\n        static: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        align: {\r\n            type: String,\r\n            default: 'center' // left|center|right\r\n        },\r\n\r\n        buttons: {\r\n            type: Array,\r\n            default: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote']\r\n            // bold|italic|underline|strikethrough|subscript|superscript|anchor|image|quote|pre|orderedlist|unorderedlist|indent|outdent|justifyLeft|justifyCenter|justifyRight|justifyFull|h1|h2|h3|h4|h5|h6|removeFormat|html\r\n        },\r\n\r\n        'disable-return': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-double-return': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-extra-spaces': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'disable-spellcheck': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'target-blank': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'auto-link': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        'auto-list': {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        fontawesome: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n\r\n        value: {\r\n            type: String,\r\n            default: null\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        setValue: function(value) {\r\n            this.setValue(value);\r\n        }\r\n    },\r\n\r\n    events: {\r\n        changed: Event,\r\n        updated: Event\r\n    },\r\n\r\n    render: function(node) {\r\n        this.$node = node;\r\n    },\r\n\r\n    mounted: function() {\r\n        var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n\r\n        if (value.indexOf('{{') !== -1) {\r\n            this.$addBinding(value, this.setValue.bind(this));\r\n        }\r\n\r\n        this.update({});\r\n    },\r\n\r\n    update: function(props) {\r\n        if (JSON.stringify(props) != JSON.stringify(this.props)) {\r\n            if (props.value != this.props.value) {\r\n                this.setValue(this.props.value);\r\n            }\r\n\r\n            this.destroyEditor();\r\n\r\n            if (this.$node.tagName == 'TEXTAREA' || this.props.editable) {\r\n                this.initEditor();\r\n            }\r\n        }\r\n    },\r\n\r\n    updatedValue: function(event) {\r\n        if (this.editor) {\r\n            this.set('value', this.editor.getContent());\r\n        } else {\r\n            var value = this.$node.tagName == 'TEXTAREA' ? this.$node.value.trim() : this.$node.innerHTML.trim();\r\n            this.set('value', value);\r\n        }\r\n\r\n        dmx.nextTick(function() {\r\n            this.dispatchEvent('updated');\r\n            if (event instanceof Event) this.dispatchEvent('changed');\r\n        }, this);\r\n    },\r\n\r\n    setValue: function(value) {\r\n        if (this.editor) {\r\n            this.editor.setContent(value);\r\n        } else if (this.$node.tagName == 'TEXTAREA') {\r\n            this.$node.value = value;\r\n        } else {\r\n            this.$node.innerHTML = value;\r\n        }\r\n\r\n        this.updatedValue();\r\n    },\r\n\r\n    initEditor: function() {\r\n        if (!this.editor) {\r\n            var buttons = this.props.buttons;\r\n\r\n            if (typeof(buttons) == 'string') {\r\n                if (buttons[0] == '[') {\r\n                    buttons = dmx.parse(buttons);\r\n                } else {\r\n                    buttons = buttons.split(/\\s*,\\s*/g);\r\n                }\r\n            }\r\n\r\n            this.editor = new MediumEditor(this.$node, {\r\n                buttonLabels: this.props.fontawesome ? 'fontawesome' : false,\r\n                disableReturn: this.props['disable-return'],\r\n                disableDoubleReturn: this.props['disable-double-return'],\r\n                disableExtraSpaces: this.props['disable-extra-spaces'],\r\n                spellcheck: !this.props['disable-spellcheck'],\r\n                targetBlank: this.props['target-blank'],\r\n                autoLink: this.props['auto-link'],\r\n                toolbar: {\r\n                    static: this.props.static,\r\n                    sticky: this.props.static,\r\n                    align: this.props.align,\r\n                    updateOnEmptySelection: this.props.static,\r\n                    buttons: buttons\r\n                },\r\n                anchorPreview: {\r\n                    showWhenToolbarIsVisible: this.props.static\r\n                },\r\n                placeholder: {\r\n                    text: this.props.placeholder,\r\n                    hideOnClick: false\r\n                },\r\n                extensions: this.initExtensions()\r\n            });\r\n\r\n            this.editor.dmxComponent = this;\r\n\r\n            this.editor.subscribe('editableInput', this.updatedValue.bind(this));\r\n        }\r\n    },\r\n\r\n    initExtensions: function() {\r\n        var extensions = {\r\n            imageDragging: {}\r\n        };\r\n\r\n        Object.keys(dmx.mediumEditor.extensions).forEach(function(name) {\r\n            var extension = dmx.mediumEditor.extensions[name];\r\n            var config = {};\r\n\r\n            if (name == 'auto-list' && !this.props['auto-list']) {\r\n                return;\r\n            }\r\n\r\n            if (name == 'toolbar') {\r\n                return\r\n            }\r\n\r\n            if (this.$node.hasAttribute('medium:' + name)) {\r\n                try {\r\n                    config = dmx.parse(this.$node.getAttribute('medium:' + name));\r\n                } catch (e) {\r\n                    console.warn('Invalid config for ' + name);\r\n                }\r\n            } else if (name == 'image-upload') {\r\n                // only external extension, only apply when attribute is on element\r\n                return;\r\n            }\r\n\r\n            extensions[name] = new extension(config);\r\n        }, this);\r\n\r\n        var buttons = this.props.buttons;\r\n\r\n        if (typeof(buttons) == 'string') {\r\n            if (buttons[0] == '[') {\r\n                buttons = dmx.parse(buttons);\r\n            } else {\r\n                buttons = buttons.split(/\\s*,\\s*/g);\r\n            }\r\n        }\r\n\r\n        extensions.toolbar = new dmx.mediumEditor.extensions.toolbar({\r\n            static: this.props.static,\r\n            sticky: this.props.static,\r\n            align: this.props.align,\r\n            updateOnEmptySelection: this.props.static,\r\n            buttons: buttons\r\n        })\r\n\r\n        return extensions;\r\n    },\r\n\r\n    destroyEditor: function() {\r\n        if (this.editor) {\r\n            this.editor.destroy();\r\n            delete this.editor;\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('alert', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getAlertElement());\r\n    },\r\n\r\n    createAlertElement: function() {\r\n        var elm = this.document.createElement('div');\r\n\r\n        elm.id = 'medium-editor-alert-' + this.getEditorId();\r\n        elm.className = 'medium-editor-alert-overlay';\r\n        elm.innerHTML = '<div class=\"medium-editor-toolbar medium-editor-toolbar-active medium-editor-alert\"><ul><li><button class=\"medium-editor-button-first medium-editor-button-last\"></button></li></ul></div>';\r\n\r\n        this.on(elm, 'click', this.hide.bind(this));\r\n\r\n        return elm;\r\n    },\r\n\r\n    getAlertElement: function () {\r\n        if (!this.elm) {\r\n            this.elm = this.createAlertElement();\r\n        }\r\n\r\n        return this.elm;\r\n    },\r\n\r\n    show: function(message) {\r\n        var elm = this.getAlertElement();\r\n        elm.querySelector('button').innerHTML = message;\r\n        elm.classList.add('medium-editor-alert-active');\r\n    },\r\n\r\n    hide: function() {\r\n        this.getAlertElement().classList.remove('medium-editor-alert-active');\r\n    }\r\n\r\n});\r\n","MediumEditor.util.keyCode.LEFT = 37;\r\nMediumEditor.util.keyCode.UP = 38;\r\nMediumEditor.util.keyCode.RIGHT = 39;\r\nMediumEditor.util.keyCode.DOWN = 40;\r\n\r\ndmx.mediumEditor.Extension('handle-selection', {\r\n\r\n    init: function () {\r\n        this.subscribe('focus', this.checkSelection.bind(this));\r\n        this.subscribe('editableClick', this.delay(this.checkSelection.bind(this)));\r\n        this.subscribe('editableKeydown', this.handleEditableKeydown.bind(this));\r\n        this.subscribe('editableKeyup', this.checkSelection.bind(this));\r\n        this.on(this.document.documentElement, 'mouseup', this.checkSelection.bind(this));\r\n    },\r\n\r\n    handleEditableKeydown: function (event) {\r\n        var node = MediumEditor.selection.getSelectionStart(this.document);\r\n        var offset = MediumEditor.selection.getCaretOffsets(node);\r\n        var keyCode = MediumEditor.util.getKeyCode(event);\r\n        var isEmpty = /^(\\s+|<br\\/?>)?$/i;\r\n\r\n        if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            offset.left === 0 &&\r\n            node.previousElementSibling &&\r\n            node.previousElementSibling.tagName == 'FIGURE'\r\n        ) {\r\n            node.previousElementSibling.querySelector('img').click();\r\n            if (isEmpty.test(node.innerHTML)) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            node.tagName == 'IMG'\r\n        ) {\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            MediumEditor.selection.moveCursor(this.document, figure.nextElementSibling, 0);\r\n            figure.parentNode.removeChild(figure);\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.ENTER &&\r\n            MediumEditor.util.getClosestTag(node, 'figure') !== false\r\n        ) {\r\n            var p = this.document.createElement('p');\r\n            p.innerHTML = '<br>';\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            figure.parentNode.parentNode.insertBefore(p, figure.parentNode.nextSibling);\r\n            MediumEditor.selection.moveCursor(this.document, p);\r\n            event.preventDefault();\r\n        } else if (\r\n            node.tagName == 'IMG' &&\r\n            (keyCode == MediumEditor.util.keyCode.UP ||\r\n            keyCode == MediumEditor.util.keyCode.DOWN ||\r\n            keyCode == MediumEditor.util.keyCode.LEFT ||\r\n            keyCode == MediumEditor.util.keyCode.RIGHT)\r\n        ) {\r\n            MediumEditor.selection.moveCursor(this.document, node.parentNode.querySelector('figcaption'));\r\n        }\r\n    },\r\n\r\n    setContent: function (html) {\r\n        if (/^\\s*$/.test(html)) {\r\n            return '<p><br></p>';\r\n        }\r\n        return html;\r\n    },\r\n\r\n    getContent: function (html) {\r\n        return html.replace(/medium\\-editor\\-is\\-selected/gi, '').replace(/class=\"\\s*\"/gi, '');\r\n    },\r\n\r\n    delay: function (fn) {\r\n        return function() {\r\n            setTimeout(function() {\r\n                fn.call(this, arguments);\r\n            }.bind(this), 0);\r\n        }\r\n    },\r\n\r\n    destroy: function() {\r\n        this.getEditorElements().forEach(function(element) {\r\n            Array.prototype.slice.call(element.querySelectorAll('.medium-editor-is-selected')).forEach(function(element) {\r\n                element.classList.remove('medium-editor-is-selected');\r\n            });\r\n        }, this);\r\n    },\r\n\r\n    checkSelection: function () {\r\n        var sel = this.document.getSelection();\r\n\r\n        if (sel && sel.rangeCount > 0) {\r\n            var range = sel.getRangeAt(0);\r\n            var editor = MediumEditor.util.getContainerEditorElement(range.commonAncestorContainer)\r\n\r\n            if (editor) {\r\n                var block = MediumEditor.util.getTopBlockContainer(range.commonAncestorContainer);\r\n\r\n                Array.prototype.slice.call(editor.querySelectorAll('.medium-editor-is-selected')).forEach(function(node) {\r\n                    node.classList.remove('medium-editor-is-selected');\r\n                });\r\n\r\n                if (!MediumEditor.util.isMediumEditorElement(block)) {\r\n                    block.classList.add('medium-editor-is-selected');\r\n                }\r\n\r\n                var node = MediumEditor.selection.getSelectionStart(this.document);\r\n                if (node && node.tagName == 'IMG') {\r\n                    node.classList.add('medium-editor-is-selected');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('toolbar', {\r\n    /* Toolbar Options */\r\n\r\n    /* align: ['left'|'center'|'right']\r\n     * When the __static__ option is true, this aligns the static toolbar\r\n     * relative to the medium-editor element.\r\n     */\r\n    align: 'center',\r\n\r\n    /* allowMultiParagraphSelection: [boolean]\r\n     * enables/disables whether the toolbar should be displayed when\r\n     * selecting multiple paragraphs/block elements\r\n     */\r\n    allowMultiParagraphSelection: true,\r\n\r\n    /* buttons: [Array]\r\n     * the names of the set of buttons to display on the toolbar.\r\n     */\r\n    buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\r\n\r\n    /* insertDiffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the insertbar.\r\n     */\r\n    insertDiffLeft: -45,\r\n\r\n    /* diffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the toolbar.\r\n     */\r\n    diffLeft: 0,\r\n\r\n    /* diffTop: [Number]\r\n     * value in pixels to be added to the Y axis positioning of the toolbar.\r\n     */\r\n    diffTop: -10,\r\n\r\n    /* firstButtonClass: [string]\r\n     * CSS class added to the first button in the toolbar.\r\n     */\r\n    firstButtonClass: 'medium-editor-button-first',\r\n\r\n    /* lastButtonClass: [string]\r\n     * CSS class added to the last button in the toolbar.\r\n     */\r\n    lastButtonClass: 'medium-editor-button-last',\r\n\r\n    /* standardizeSelectionStart: [boolean]\r\n     * enables/disables standardizing how the beginning of a range is decided\r\n     * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\r\n     */\r\n    standardizeSelectionStart: false,\r\n\r\n    /* static: [boolean]\r\n     * enable/disable the toolbar always displaying in the same location\r\n     * relative to the medium-editor element.\r\n     */\r\n    static: false,\r\n\r\n    /* sticky: [boolean]\r\n     * When the __static__ option is true, this enables/disables the toolbar\r\n     * \"sticking\" to the viewport and staying visible on the screen while\r\n     * the page scrolls.\r\n     */\r\n    sticky: false,\r\n\r\n    /* stickyTopOffset: [Number]\r\n     * Value in pixel of the top offset above the toolbar\r\n     */\r\n    stickyTopOffset: 0,\r\n\r\n    /* updateOnEmptySelection: [boolean]\r\n     * When the __static__ option is true, this enables/disables updating\r\n     * the state of the toolbar buttons even when the selection is collapsed\r\n     * (there is no selection, just a cursor).\r\n     */\r\n    updateOnEmptySelection: false,\r\n\r\n    /* relativeContainer: [node]\r\n     * appending the toolbar to a given node instead of body\r\n     */\r\n    relativeContainer: null,\r\n\r\n    init: function () {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.initThrottledMethods();\r\n\r\n        if (!this.relativeContainer) {\r\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\r\n        } else {\r\n            this.relativeContainer.appendChild(this.getToolbarElement());\r\n        }\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getInsertbarElement());\r\n    },\r\n\r\n    // Helper method to execute method for every extension, but ignoring the toolbar extension\r\n    forEachExtension: function (iterator, context) {\r\n        return this.base.extensions.forEach(function (command) {\r\n            if (command === this) {\r\n                return;\r\n            }\r\n            return iterator.apply(context || this, arguments);\r\n        }, this);\r\n    },\r\n\r\n    // Toolbar creation/deletion\r\n\r\n    createToolbar: function () {\r\n        var toolbar = this.document.createElement('div');\r\n\r\n        toolbar.id = 'medium-editor-toolbar-' + this.getEditorId();\r\n        toolbar.className = 'medium-editor-toolbar';\r\n\r\n        if (this.static) {\r\n            toolbar.className += ' static-toolbar';\r\n        } else if (this.relativeContainer) {\r\n            toolbar.className += ' medium-editor-relative-toolbar';\r\n        } else {\r\n            toolbar.className += ' medium-editor-stalker-toolbar';\r\n        }\r\n\r\n        toolbar.appendChild(this.createToolbarButtons());\r\n\r\n        // Add any forms that extensions may have\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm) {\r\n                toolbar.appendChild(extension.getForm());\r\n            }\r\n        });\r\n\r\n        this.attachEventHandlers();\r\n\r\n        return toolbar;\r\n    },\r\n\r\n    createToolbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li,\r\n            btn,\r\n            buttons,\r\n            extension,\r\n            buttonName,\r\n            buttonOpts;\r\n\r\n        ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-toolbar-actions';\r\n        ul.style.display = 'block';\r\n\r\n        this.buttons.forEach(function (button) {\r\n            if (typeof button === 'string') {\r\n                buttonName = button;\r\n                buttonOpts = null;\r\n            } else {\r\n                buttonName = button.name;\r\n                buttonOpts = button;\r\n            }\r\n\r\n            // If the button already exists as an extension, it'll be returned\r\n            // othwerise it'll create the default built-in button\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getButton === 'function') {\r\n                btn = extension.getButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        buttons = ul.querySelectorAll('button');\r\n        if (buttons.length > 0) {\r\n            buttons[0].classList.add(this.firstButtonClass);\r\n            buttons[buttons.length - 1].classList.add(this.lastButtonClass);\r\n        }\r\n\r\n        return ul;\r\n    },\r\n\r\n    createInsertbar: function () {\r\n        var insertbar = this.document.createElement('div');\r\n\r\n        insertbar.id = 'medium-editor-insertbar-' + this.getEditorId();\r\n        insertbar.className = 'medium-editor-insertbar';\r\n\r\n        var toggle = this.document.createElement('button');\r\n        toggle.className = 'medium-editor-insertbar-toggle';\r\n        toggle.innerHTML = this.getEditorOption('buttonLabels') == 'fontawesome' ? '<i class=\"fa fa-plus\"></i>' : '<b>+</b>';\r\n\r\n        this.on(toggle, 'click', this.handleToggleClick.bind(this));\r\n\r\n        insertbar.appendChild(toggle);\r\n        insertbar.appendChild(this.createInsertbarButtons());\r\n\r\n        return insertbar;\r\n    },\r\n\r\n    createInsertbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li, btn, buttons, extension, buttonName, buttonOpts;\r\n\r\n        ul.id = 'medium-editor-insertbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-insertbar-actions';\r\n\r\n        Object.keys(dmx.mediumEditor.extensions).forEach(function (button) {\r\n            buttonName = button;\r\n            buttonOpts = null;\r\n\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getInsertButton === 'function') {\r\n                btn = extension.getInsertButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        return ul;\r\n    },\r\n\r\n    destroy: function () {\r\n        if (this.toolbar) {\r\n            if (this.toolbar.parentNode) {\r\n                this.toolbar.parentNode.removeChild(this.toolbar);\r\n            }\r\n            delete this.toolbar;\r\n        }\r\n\r\n        if (this.insertbar) {\r\n            if (this.insertbar.parentNode) {\r\n                this.insertbar.parentNode.removeChild(this.insertbar);\r\n            }\r\n            delete this.insertbar;\r\n        }\r\n    },\r\n\r\n    // Toolbar accessors\r\n\r\n    getInteractionElements: function () {\r\n        return [this.getToolbarElement(), this.getInsertbarElement()];\r\n    },\r\n\r\n    getToolbarElement: function () {\r\n        if (!this.toolbar) {\r\n            this.toolbar = this.createToolbar();\r\n        }\r\n\r\n        return this.toolbar;\r\n    },\r\n\r\n    getToolbarActionsElement: function () {\r\n        return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\r\n    },\r\n\r\n    getInsertbarElement: function () {\r\n        if (!this.insertbar) {\r\n            this.insertbar = this.createInsertbar();\r\n        }\r\n        return this.insertbar;\r\n    },\r\n\r\n    getInsertbarActionsElement: function () {\r\n        return this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions');\r\n    },\r\n\r\n    // Toolbar event handlers\r\n\r\n    initThrottledMethods: function () {\r\n        // throttledPositionToolbar is throttled because:\r\n        // - It will be called when the browser is resizing, which can fire many times very quickly\r\n        // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\r\n        this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\r\n            if (this.base.isActive) {\r\n                this.positionToolbarIfShown();\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    attachEventHandlers: function () {\r\n        // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\r\n        this.subscribe('blur', this.handleBlur.bind(this));\r\n        this.subscribe('focus', this.handleFocus.bind(this));\r\n\r\n        // Updating the state of the toolbar as things change\r\n        this.subscribe('editableClick', this.handleEditableClick.bind(this));\r\n        this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\r\n\r\n        // Handle mouseup on document for updating the selection in the toolbar\r\n        this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\r\n\r\n        // Add a scroll event for sticky toolbar\r\n        if (this.static && this.sticky) {\r\n            // On scroll (capture), re-position the toolbar\r\n            this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\r\n        }\r\n\r\n        // On resize, re-position the toolbar\r\n        this.on(this.window, 'resize', this.handleWindowResize.bind(this));\r\n    },\r\n\r\n    handleWindowScroll: function () {\r\n        this.positionToolbarIfShown();\r\n    },\r\n\r\n    handleWindowResize: function () {\r\n        this.throttledPositionToolbar();\r\n    },\r\n\r\n    handleDocumentMouseup: function (event) {\r\n        // Do not trigger checkState when mouseup fires over the toolbar\r\n        if (event && event.target && (MediumEditor.util.isDescendant(this.getToolbarElement(), event.target) || MediumEditor.util.isDescendant(this.getInsertbarElement(), event.target))) {\r\n            return false;\r\n        }\r\n        this.checkState();\r\n    },\r\n\r\n    handleEditableClick: function () {\r\n        // Delay the call to checkState to handle bug where selection is empty\r\n        // immediately after clicking inside a pre-existing selection\r\n        setTimeout(function () {\r\n            this.checkState();\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    handleEditableKeyup: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleBlur: function () {\r\n        // Kill any previously delayed calls to hide the toolbar\r\n        clearTimeout(this.hideTimeout);\r\n\r\n        // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\r\n        // calls from happening in this specific case\r\n        clearTimeout(this.delayShowTimeout);\r\n\r\n        // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\r\n        this.hideTimeout = setTimeout(function () {\r\n            this.hideToolbar();\r\n            this.hideInsertbar();\r\n        }.bind(this), 1);\r\n    },\r\n\r\n    handleFocus: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleToggleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.isInsertbarExpanded()) {\r\n            this.collapseInsertbar();\r\n        } else {\r\n            this.expandInsertbar();\r\n        }\r\n    },\r\n\r\n    // Hiding/showing toolbar\r\n\r\n    isDisplayed: function () {\r\n        return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\r\n    },\r\n\r\n    showToolbar: function () {\r\n        clearTimeout(this.hideTimeout);\r\n        if (!this.isDisplayed()) {\r\n            this.getToolbarElement().classList.add('medium-editor-toolbar-active');\r\n            this.trigger('showToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideToolbar: function () {\r\n        if (this.isDisplayed()) {\r\n            this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\r\n            this.trigger('hideToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarDisplayed: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-active');\r\n    },\r\n\r\n    showInsertbar: function () {\r\n        if (!this.isInsertbarDisplayed() && this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions').childNodes.length) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-active');\r\n            this.trigger('showInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideInsertbar: function () {\r\n        if (this.isInsertbarDisplayed()) {\r\n            this.collapseInsertbar();\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-active');\r\n            this.trigger('hideInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarExpanded: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-expand');\r\n    },\r\n\r\n    expandInsertbar: function () {\r\n        if (!this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-expand');\r\n            this.trigger('expandInsertbar');\r\n        }\r\n    },\r\n\r\n    collapseInsertbar: function() {\r\n        if (this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-expand');\r\n            this.trigger('collapseInsertbar');\r\n        }\r\n    },\r\n\r\n    isToolbarDefaultActionsDisplayed: function () {\r\n        return this.getToolbarActionsElement().style.display === 'block';\r\n    },\r\n\r\n    hideToolbarDefaultActions: function () {\r\n        if (this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'none';\r\n        }\r\n    },\r\n\r\n    showToolbarDefaultActions: function () {\r\n        this.hideExtensionForms();\r\n\r\n        if (!this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'block';\r\n        }\r\n\r\n        // Using setTimeout + options.delay because:\r\n        // We will actually be displaying the toolbar, which should be controlled by options.delay\r\n        this.delayShowTimeout = this.base.delay(function () {\r\n            this.showToolbar();\r\n        }.bind(this));\r\n    },\r\n\r\n    hideExtensionForms: function () {\r\n        // Hide all extension forms\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm && extension.isDisplayed()) {\r\n                extension.hideForm();\r\n            }\r\n        });\r\n    },\r\n\r\n    // Responding to changes in user selection\r\n\r\n    // Checks for existance of multiple block elements in the current selection\r\n    multipleBlockElementsSelected: function () {\r\n        var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\r\n            regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\r\n            selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\r\n            hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\r\n\r\n        return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\r\n    },\r\n\r\n    modifySelection: function () {\r\n        var selection = this.window.getSelection(),\r\n            selectionRange = selection.getRangeAt(0);\r\n\r\n        /*\r\n        * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\r\n        * will be at the very end of an element.  In other browsers, the selectionRange start\r\n        * would instead be at the very beginning of an element that actually has content.\r\n        * example:\r\n        *   <span>foo</span><span>bar</span>\r\n        *\r\n        * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\r\n        * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\r\n        * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\r\n        * properties on the 'bar' span, they won't be reflected accurately in the toolbar\r\n        * (ie 'Bold' button wouldn't be active)\r\n        *\r\n        * So, for cases where the selectionRange start is at the end of an element/node, find the next\r\n        * adjacent text node that actually has content in it, and move the selectionRange start there.\r\n        */\r\n        if (this.standardizeSelectionStart &&\r\n                selectionRange.startContainer.nodeValue &&\r\n                (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\r\n            var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\r\n            if (adjacentNode) {\r\n                var offset = 0;\r\n                while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\r\n                    offset = offset + 1;\r\n                }\r\n                selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\r\n                    selectionRange.endContainer, selectionRange.endOffset);\r\n            }\r\n        }\r\n    },\r\n\r\n    checkState: function () {\r\n        if (this.base.preventSelectionUpdates) {\r\n            return;\r\n        }\r\n\r\n        // If no editable has focus OR selection is inside contenteditable = false\r\n        // hide toolbar\r\n        if (!this.base.getFocusedElement() ||\r\n                MediumEditor.selection.selectionInContentEditableFalse(this.window)) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // If there's no selection element, selection element doesn't belong to this editor\r\n        // or toolbar is disabled for this selection element\r\n        // hide toolbar\r\n        var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\r\n        if (!selectionElement ||\r\n                this.getEditorElements().indexOf(selectionElement) === -1 ||\r\n                selectionElement.getAttribute('data-disable-toolbar')) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // Now we know there's a focused editable with a selection\r\n\r\n        if (this.document.getSelection().isCollapsed && /^(\\s+|<br\\/?>)?$/i.test(MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document)).innerHTML)) {\r\n            this.showAndUpdateInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n\r\n        // If the updateOnEmptySelection option is true, show the toolbar\r\n        if (this.updateOnEmptySelection && this.static) {\r\n            return this.showAndUpdateToolbar();\r\n        }\r\n\r\n        // If we don't have a 'valid' selection -> hide toolbar\r\n        if (!MediumEditor.selection.selectionContainsContent(this.document) ||\r\n            (this.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected())) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        this.showAndUpdateToolbar();\r\n    },\r\n\r\n    // Updating the toolbar\r\n\r\n    showAndUpdateToolbar: function () {\r\n        this.modifySelection();\r\n        this.setToolbarButtonStates();\r\n        this.trigger('positionToolbar', {}, this.base.getFocusedElement());\r\n        this.showToolbarDefaultActions();\r\n        this.setToolbarPosition();\r\n    },\r\n\r\n    showAndUpdateInsertbar: function () {\r\n        this.collapseInsertbar();\r\n        this.trigger('positionInsertbar', {}, this.base.getFocusedElement());\r\n        this.setInsertbarPosition();\r\n    },\r\n\r\n    setToolbarButtonStates: function () {\r\n        this.forEachExtension(function (extension) {\r\n            if (typeof extension.isActive === 'function' &&\r\n                typeof extension.setInactive === 'function') {\r\n                extension.setInactive();\r\n            }\r\n        });\r\n\r\n        this.checkActiveButtons();\r\n    },\r\n\r\n    checkActiveButtons: function () {\r\n        var manualStateChecks = [],\r\n            queryState = null,\r\n            selectionRange = MediumEditor.selection.getSelectionRange(this.document),\r\n            parentNode,\r\n            updateExtensionState = function (extension) {\r\n                if (typeof extension.checkState === 'function') {\r\n                    extension.checkState(parentNode);\r\n                } else if (typeof extension.isActive === 'function' &&\r\n                           typeof extension.isAlreadyApplied === 'function' &&\r\n                           typeof extension.setActive === 'function') {\r\n                    if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\r\n                        extension.setActive();\r\n                    }\r\n                }\r\n            };\r\n\r\n        if (!selectionRange) {\r\n            return;\r\n        }\r\n\r\n        // Loop through all extensions\r\n        this.forEachExtension(function (extension) {\r\n            // For those extensions where we can use document.queryCommandState(), do so\r\n            if (typeof extension.queryCommandState === 'function') {\r\n                queryState = extension.queryCommandState();\r\n                // If queryCommandState returns a valid value, we can trust the browser\r\n                // and don't need to do our manual checks\r\n                if (queryState !== null) {\r\n                    if (queryState && typeof extension.setActive === 'function') {\r\n                        extension.setActive();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            // We can't use queryCommandState for this extension, so add to manualStateChecks\r\n            manualStateChecks.push(extension);\r\n        });\r\n\r\n        parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\r\n\r\n        // Make sure the selection parent isn't outside of the contenteditable\r\n        if (!this.getEditorElements().some(function (element) {\r\n                return MediumEditor.util.isDescendant(element, parentNode, true);\r\n            })) {\r\n            return;\r\n        }\r\n\r\n        // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\r\n        while (parentNode) {\r\n            manualStateChecks.forEach(updateExtensionState);\r\n\r\n            // we can abort the search upwards if we leave the contentEditable element\r\n            if (MediumEditor.util.isMediumEditorElement(parentNode)) {\r\n                break;\r\n            }\r\n            parentNode = parentNode.parentNode;\r\n        }\r\n    },\r\n\r\n    // Positioning toolbar\r\n\r\n    positionToolbarIfShown: function () {\r\n        if (this.isDisplayed()) {\r\n            this.setToolbarPosition();\r\n        }\r\n    },\r\n\r\n    setToolbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        // If there isn't a valid selection, bail\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        if (this.static || !selection.isCollapsed) {\r\n            // we don't need any absolute positioning if relativeContainer is set\r\n            if (!this.relativeContainer) {\r\n                if (this.static) {\r\n                    this.positionStaticToolbar(container);\r\n                } else {\r\n                    this.positionToolbar(selection);\r\n                }\r\n            }\r\n\r\n            this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showToolbar();\r\n        }\r\n    },\r\n\r\n    setInsertbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n\r\n        if (selection.isCollapsed && topBlockContainer.textContent == '') {\r\n            var rect = topBlockContainer.getBoundingClientRect();\r\n\r\n            this.getInsertbarElement().style.top = (rect.top + this.window.pageYOffset) + 'px';\r\n            this.getInsertbarElement().style.left = Math.max(rect.left + this.window.pageXOffset + this.insertDiffLeft, 0) + 'px';\r\n            this.trigger('positionedInsertbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n    },\r\n\r\n    positionStaticToolbar: function (container) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n\r\n        // document.documentElement for IE 9\r\n        var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\r\n            windowWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            containerRect = container.getBoundingClientRect(),\r\n            containerTop = containerRect.top + scrollTop,\r\n            containerCenter = (containerRect.left + (containerRect.width / 2)),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            targetLeft;\r\n\r\n        if (this.sticky) {\r\n            // If it's beyond the height of the editor, position it at the bottom of the editor\r\n            if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n            // Stick the toolbar to the top of the window\r\n            } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.classList.add('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = this.stickyTopOffset + 'px';\r\n            // Normal static toolbar position\r\n            } else {\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n            }\r\n        } else {\r\n            toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n        }\r\n\r\n        switch (this.align) {\r\n            case 'left':\r\n                targetLeft = containerRect.left;\r\n                break;\r\n\r\n            case 'right':\r\n                targetLeft = containerRect.right - toolbarWidth;\r\n                break;\r\n\r\n            case 'center':\r\n                targetLeft = containerCenter - halfOffsetWidth;\r\n                break;\r\n        }\r\n\r\n        if (targetLeft < 0) {\r\n            targetLeft = 0;\r\n        } else if ((targetLeft + toolbarWidth) > windowWidth) {\r\n            targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\r\n        }\r\n\r\n        toolbarElement.style.left = targetLeft + 'px';\r\n    },\r\n\r\n    positionToolbar: function (selection) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n        this.getToolbarElement().style.right = 'initial';\r\n\r\n        var range = selection.getRangeAt(0),\r\n            boundary = range.getBoundingClientRect();\r\n\r\n        // Handle selections with just images\r\n        if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\r\n            // If there's a nested image, use that for the bounding rectangle\r\n            if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\r\n                boundary = range.startContainer.querySelector('img').getBoundingClientRect();\r\n            } else {\r\n                boundary = range.startContainer.getBoundingClientRect();\r\n            }\r\n        }\r\n\r\n        var containerWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            buttonHeight = 50,\r\n            defaultLeft = this.diffLeft - halfOffsetWidth,\r\n            elementsContainer = this.getEditorOption('elementsContainer'),\r\n            elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\r\n            positions = {},\r\n            relativeBoundary = {},\r\n            middleBoundary, elementsContainerBoundary;\r\n\r\n        // If container element is absolute / fixed, recalculate boundaries to be relative to the container\r\n        if (elementsContainerAbsolute) {\r\n            elementsContainerBoundary = elementsContainer.getBoundingClientRect();\r\n            ['top', 'left'].forEach(function (key) {\r\n                relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\r\n            });\r\n\r\n            relativeBoundary.width = boundary.width;\r\n            relativeBoundary.height = boundary.height;\r\n            boundary = relativeBoundary;\r\n\r\n            containerWidth = elementsContainerBoundary.width;\r\n\r\n            // Adjust top position according to container scroll position\r\n            positions.top = elementsContainer.scrollTop;\r\n        } else {\r\n            // Adjust top position according to window scroll position\r\n            positions.top = this.window.pageYOffset;\r\n        }\r\n\r\n        middleBoundary = boundary.left + boundary.width / 2;\r\n        positions.top += boundary.top - toolbarHeight;\r\n\r\n        if (boundary.top < buttonHeight) {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-over');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-under');\r\n            positions.top += buttonHeight + boundary.height - this.diffTop;\r\n        } else {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-under');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-over');\r\n            positions.top += this.diffTop;\r\n        }\r\n\r\n        if (middleBoundary < halfOffsetWidth) {\r\n            positions.left = defaultLeft + halfOffsetWidth;\r\n            positions.right = 'initial';\r\n        } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\r\n            positions.left = 'auto';\r\n            positions.right = 0;\r\n        } else {\r\n            positions.left = defaultLeft + middleBoundary;\r\n            positions.right = 'initial';\r\n        }\r\n\r\n        ['top', 'left', 'right'].forEach(function (key) {\r\n            toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\r\n        });\r\n    }\r\n});\r\n","dmx.mediumEditor.states = {\r\n    'headers': {\r\n        buttons: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n        checkState: function(node) {\r\n            return ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(node.nodeName) != -1;\r\n        }\r\n    }\r\n};\r\n\r\ndmx.mediumEditor.Extension('toolbar-states', {\r\n\r\n    pendingState: null,\r\n\r\n    currentState: null,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('positionToolbar', this.onPositionToolbar.bind(this));\r\n    },\r\n\r\n    checkState: function(node) {\r\n        if (!this.pendingState) {\r\n            Object.keys(dmx.mediumEditor.states).forEach(function(name) {\r\n                var state = dmx.mediumEditor.states[name];\r\n                if (state.checkState(node)) {\r\n                    this.pendingState = state;\r\n                }\r\n            }, this);\r\n        }\r\n\r\n        if (MediumEditor.util.isMediumEditorElement(node)) {\r\n            this.currentState = this.pendingState;\r\n            this.pendingState = null;\r\n        }\r\n    },\r\n\r\n    onPositionToolbar: function() {\r\n        var firstButton, lastButton;\r\n        var toolbar = this.base.getExtensionByName('toolbar');\r\n        var state = this.currentState || { buttons: toolbar.buttons };\r\n\r\n        toolbar.forEachExtension(function(extension) {\r\n            if (typeof extension.getButton == 'function') {\r\n                var button = extension.getButton();\r\n\r\n                if (state.buttons.indexOf(extension.name) != -1) {\r\n                    button.style.removeProperty('display');\r\n                    firstButton = firstButton || button;\r\n                    lastButton = button;\r\n                } else {\r\n                    button.style.setProperty('display', 'none');\r\n                }\r\n\r\n                button.classList.remove(toolbar.firstButtonClass);\r\n                button.classList.remove(toolbar.lastButtonClass);\r\n            }\r\n        });\r\n\r\n        if (firstButton && lastButton) {\r\n            firstButton.classList.add(toolbar.firstButtonClass);\r\n            lastButton.classList.add(toolbar.lastButtonClass);\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('auto-list', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('editableKeypress', this.onKeypress.bind(this));\r\n    },\r\n\r\n    onKeypress: function (keyPressEvent) {\r\n        if (MediumEditor.util.isKey(keyPressEvent, [MediumEditor.util.keyCode.SPACE])) {\r\n            var list_start = this.base.getSelectedParentElement().textContent;\r\n\r\n            if (list_start == '1.' || list_start == '*') {\r\n                this.base.execAction(list_start == '*' ? 'insertunorderedlist' : 'insertorderedlist');\r\n                this.base.getSelectedParentElement().textContent = '';\r\n                keyPressEvent.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n"]}