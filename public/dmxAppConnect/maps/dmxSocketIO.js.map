{"version":3,"sources":["core/sockets.js","actions/sockets.js","components/socket.js"],"names":["dmx","__sockets","Socket","namespace","options","config","parent","extend","transports","socket","io","on","opts","Object","keys","forEach","eventName","data","cb","console","log","Flow","run","DataScope","$param","then","Actions","sockets.emit","this","parse","emit","params","sockets.request","Promise","resolve","Component","initialData","id","connected","disconnected","attributes","type","String","default","methods","connect","request","events","Event","disconnect","connect_error","message","dispatchEvent","trigger","set","render","node","textContent","cfg","window","Hjson","JSON","e","error","debug","props","bind","onAny"],"mappings":";;;;;;AAAAA,IAAAC,UAAA,GAEAD,IAAAE,OAAA,SAAAC,EAAAC,EAAAC,EAAAC,GACAH,EAAAA,GAAA,IACAC,EAAAJ,IAAAO,QAAA,EAAA,CACAC,WAAA,CAAA,cACAJ,GAEA,IAAAK,EAAAT,IAAAC,UAAAE,GAyBA,OAvBAM,IACAA,EAAAC,GAAAP,EAAAC,GACA,aAAAA,EAAAI,WAAA,IAGAC,EAAAE,GAAA,oBAAA,WACAF,EAAAC,GAAAE,KAAAJ,WAAA,CAAA,UAAA,gBAKAH,GACAQ,OAAAC,KAAAT,GAAAU,QAAA,SAAAC,GACAP,EAAAE,GAAAK,EAAA,SAAAC,EAAAC,GACAC,QAAAC,IAAA,QAAAH,GACAjB,IAAAqB,KAAAC,IAAAjB,EAAAW,GAAA,IAAAhB,IAAAuB,UAAA,CAAAC,OAAAP,GAAAX,IAAAmB,KAAA,SAAAR,GACAE,QAAAC,IAAA,QAAAH,GACA,mBAAAC,GAAAA,EAAAD,SAMAR,GCjCAT,IAAA0B,QAAA,CAEAC,eAAA,SAAAvB,GACAA,EAAAwB,KAAAC,MAAAzB,GACAJ,IAAAE,OAAAE,EAAAD,WAAA,KAAA2B,KAAA1B,EAAAY,UAAAZ,EAAA2B,SAGAC,kBAAA,SAAA5B,GAEA,OADAA,EAAAwB,KAAAC,MAAAzB,GACA,IAAA6B,QAAA,SAAAC,GACAlC,IAAAE,OAAAE,EAAAD,WAAA,KAAA2B,KAAA1B,EAAAY,UAAAZ,EAAA2B,OAAAG,QCVAlC,IAAAmC,UAAA,SAAA,CAEAC,YAAA,CACAC,GAAA,KACAC,WAAA,EACAC,cAAA,GAGAC,WAAA,CACArC,UAAA,CACAsC,KAAAC,OACAC,QAAA,KAGAvC,QAAA,CACAqC,KAAA5B,OACA8B,QAAA,KAIAC,QAAA,CACAd,KAAA,SAAAd,EAAAC,GACAW,KAAAnB,OAAAqB,KAAAd,EAAAC,IAGA4B,QAAA,WACAjB,KAAAnB,OAAAoC,WAGAC,QAAA,SAAA9B,EAAAC,GACA,IAAAR,EAAAmB,KAAAnB,OAEA,OAAA,IAAAwB,QAAA,SAAAC,GACAzB,EAAAqB,KAAAd,EAAAC,EAAAiB,OAKAa,OAAA,CACAF,QAAAG,MACAC,WAAAD,MACAE,cAAAF,MACAG,QAAAH,OAGAG,QAAA,SAAAnC,EAAAC,GACAW,KAAAwB,cAAA,UAAA,GAAAnC,EAAAD,IAGAqC,QAAA,SAAArC,GACAY,KAAA0B,IAAA,KAAA1B,KAAAnB,OAAA4B,IACAT,KAAA0B,IAAA,YAAA1B,KAAAnB,OAAA6B,WACAV,KAAA0B,IAAA,eAAA1B,KAAAnB,OAAA8B,cACAX,KAAAwB,cAAApC,IAGAuC,OAAA,SAAAC,GACA,GAAAA,EAAAC,YAEA,IACA7B,KAAA8B,KAAAC,OAAAC,MAAAA,MAAAC,MAAAhC,MAAA2B,EAAAC,aACA,MAAAK,GACA3C,QAAA4C,MAAAD,GACA9D,IAAAgE,OACA7C,QAAA6C,MAAAR,EAAAC,aAKA7B,KAAAnB,OAAAT,IAAAE,OAAA0B,KAAAqC,MAAA9D,UAAAyB,KAAAqC,MAAA7D,QAAAwB,KAAA8B,IAAA9B,MACAA,KAAAnB,OAAAE,GAAA,UAAAiB,KAAAyB,QAAAa,KAAAtC,KAAA,YACAA,KAAAnB,OAAAE,GAAA,aAAAiB,KAAAyB,QAAAa,KAAAtC,KAAA,eACAA,KAAAnB,OAAAE,GAAA,gBAAAiB,KAAAyB,QAAAa,KAAAtC,KAAA,kBACAA,KAAAnB,OAAA0D,MAAAvC,KAAAuB,QAAAe,KAAAtC","file":"../dmxSocketIO/dmxSocketIO.js","sourcesContent":["dmx.__sockets = {};\r\n\r\ndmx.Socket = function(namespace, options, config, parent) {\r\n    namespace = namespace || '/';\r\n    options = dmx.extend(true, {\r\n        transports: ['websocket'] // default to websocket transport only\r\n    }, options);\r\n\r\n    var socket = dmx.__sockets[namespace];\r\n\r\n    if (!socket) {\r\n        socket = io(namespace, options);\r\n        if (options.transports[0] == 'websocket') {\r\n            // on reconnection, reset the transports option, as the Websocket\r\n            // connection may have failed (caused by proxy, firewall, browser, ...)\r\n            socket.on('reconnect_attempt', function() {\r\n                socket.io.opts.transports = ['polling', 'websocket'];\r\n            });\r\n        }\r\n    }\r\n\r\n    if (config) {\r\n        Object.keys(config).forEach(function(eventName) {\r\n            socket.on(eventName, function(data, cb) {\r\n                console.log('DATA1', data)\r\n                dmx.Flow.run(config[eventName], new dmx.DataScope({$param: data}, parent)).then(function(data) {\r\n                    console.log('DATA2', data)\r\n                    if (typeof cb == 'function') cb(data);\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n    return socket;\r\n}","dmx.Actions({\r\n\r\n    'sockets.emit': function(options) {\r\n        options = this.parse(options);\r\n        dmx.Socket(options.namespace || '/').emit(options.eventName, options.params);\r\n    },\r\n\r\n    'sockets.request': function(options) {\r\n        options = this.parse(options);\r\n        return new Promise(function(resolve) {\r\n            dmx.Socket(options.namespace || '/').emit(options.eventName, options.params, resolve);\r\n        });\r\n    }\r\n\r\n});","dmx.Component('socket', {\r\n\r\n    initialData: {\r\n        id: null,\r\n        connected: false,\r\n        disconnected: true\r\n    },\r\n\r\n    attributes: {\r\n        namespace: {\r\n            type: String,\r\n            default: '/'\r\n        },\r\n\r\n        options: {\r\n            type: Object,\r\n            default: {}\r\n        }\r\n    },\r\n\r\n    methods: {\r\n        emit: function(eventName, data) {\r\n            this.socket.emit(eventName, data);\r\n        },\r\n\r\n        connect: function() {\r\n            this.socket.connect();\r\n        },\r\n\r\n        request: function(eventName, data) {\r\n            var socket = this.socket;\r\n\r\n            return new Promise(function(resolve) {\r\n                socket.emit(eventName, data, resolve);\r\n            });\r\n        }\r\n    },\r\n\r\n    events: {\r\n        connect: Event,\r\n        disconnect: Event,\r\n        connect_error: Event,\r\n        message: Event\r\n    },\r\n\r\n    message: function(eventName, data) {\r\n        this.dispatchEvent('message', {}, data, eventName);\r\n    },\r\n\r\n    trigger: function(eventName) {\r\n        this.set('id', this.socket.id);\r\n        this.set('connected', this.socket.connected);\r\n        this.set('disconnected', this.socket.disconnected);\r\n        this.dispatchEvent(eventName);\r\n    },\r\n\r\n    render: function(node) {\r\n        if (node.textContent) {\r\n            // for usage like a flow, a script tag with config as content\r\n            try {\r\n                this.cfg = (window.Hjson ? Hjson : JSON).parse(node.textContent);\r\n            } catch (e) {\r\n                console.error(e);\r\n                if (dmx.debug) {\r\n                    console.debug(node.textContent);\r\n                }\r\n            }\r\n        }\r\n        \r\n        this.socket = dmx.Socket(this.props.namespace, this.props.options, this.cfg, this);\r\n        this.socket.on('connect', this.trigger.bind(this, 'connect'));\r\n        this.socket.on('disconnect', this.trigger.bind(this, 'disconnect'));\r\n        this.socket.on('connect_error', this.trigger.bind(this, 'connect_error'));\r\n        this.socket.onAny(this.message.bind(this));\r\n    }\r\n\r\n});"]}